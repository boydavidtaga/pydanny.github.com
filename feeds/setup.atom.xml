<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pydanny</title><link href="https://pydanny.com/" rel="alternate"></link><link href="https://pydanny.com/feeds/setup.atom.xml" rel="self"></link><id>https://pydanny.com/</id><updated>2012-09-04T10:30:00-07:00</updated><entry><title>Installing Pycairo on Mountain Lion</title><link href="https://pydanny.com/installing-pycairo-on-mountain-lion.html" rel="alternate"></link><updated>2012-09-04T10:30:00-07:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:pydanny.com,2012-09-04:installing-pycairo-on-mountain-lion.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://cairographics.org/pycairo/"&gt;Pycairo&lt;/a&gt; is the binding for the &lt;a class="reference external" href="http://cairographics.org/"&gt;cairo graphics library&lt;/a&gt;. It's also not something you can get running with a simple &lt;tt class="docutils literal"&gt;pip install py2cairo&lt;/tt&gt;. After many hours of working the search engines and dancing to the configure/make/make install melody, I figured out an answer that worked for me.&lt;/p&gt;
&lt;div class="section" id="step-1-install-gcc"&gt;
&lt;h2&gt;Step 1 - Install GCC&lt;/h2&gt;
&lt;p&gt;If you don't have it yet, go get &lt;a class="reference external" href="https://github.com/downloads/kennethreitz/osx-gcc-installer/GCC-10.7-v2.pkg"&gt;https://github.com/downloads/kennethreitz/osx-gcc-installer/GCC-10.7-v2.pkg&lt;/a&gt; and install it. It's 200 MB so make sure you have a fast connection and/or a good place to wait.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-install-homebrew"&gt;
&lt;h2&gt;Step 2 - Install Homebrew&lt;/h2&gt;
&lt;p&gt;I use Homebrew instead of Macports. If you don't have it yet, paste this in a terminal prompt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ruby &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;curl -fsSkL raw.github.com/mxcl/homebrew/go&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-install-cairo"&gt;
&lt;h2&gt;Step 3 - Install Cairo&lt;/h2&gt;
&lt;p&gt;In your terminal prompt, type the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew install cairo --use-clang
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You'll get some messages about &lt;cite&gt;LDFLAGS&lt;/cite&gt; and &lt;cite&gt;CPPFLAGS&lt;/cite&gt; in build variables, but that's only important if you skip Homebrew and build your own software later that interacts with &lt;strong&gt;cairo&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-4-install-pycairo-itself"&gt;
&lt;h2&gt;Step 4 - Install Pycairo itself&lt;/h2&gt;
&lt;p&gt;The nasty little trick to this is to remember that &lt;strong&gt;Pycairo&lt;/strong&gt; is packaged on it's site and other places as &lt;strong&gt;py2cairo&lt;/strong&gt;. When they get around to releasing version 3 of Pycairo, I'm going to beg and plead that they follow an obvious naming system for their bundles. I know this is done in other communities, but it's frustrating and a real barrier for getting into a project.&lt;/p&gt;
&lt;p&gt;In case, in your terminal prompt, type the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew install py2cairo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are using a non-Homebrew installed Python like I do, you have to set the PYTHONPATH to find pycairo.  Set your PYTHONPATH in your &lt;cite&gt;.bashrc/.profile/.whatever&lt;/cite&gt; to the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/lib/python2.7/site-packages:&lt;span class="nv"&gt;$PYTHONPATH&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yes, it's the system Python, but for now I'm okay with it. If someone has an easy recipe for alternative Python installations, I would love to link to it.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="tools"></category><category term="howto"></category><category term="setup"></category></entry><entry><title>Django Requirements 2012-08-15</title><link href="https://pydanny.com/django-requirements-2012-08-15.html" rel="alternate"></link><updated>2012-08-15T18:00:00-07:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:pydanny.com,2012-08-15:django-requirements-2012-08-15.html</id><summary type="html">&lt;p&gt;A little over three months ago &lt;a class="reference external" href="https://pydanny.com/django-requirements-for-a-project.html"&gt;I blogged about my preferred requirements&lt;/a&gt; list.
It's now nearly the eve of &lt;a class="reference external" href="http://djangodash.com"&gt;Django Dash&lt;/a&gt;, and I feel it's time to update the list.
I'm going to bump the versions on some of the existing packages and add some new ones to the list.&lt;/p&gt;
&lt;div class="section" id="new-packages"&gt;
&lt;h2&gt;New Packages&lt;/h2&gt;
&lt;div class="section" id="django-braces-0-1-3"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-braces/"&gt;django-braces==0.1.3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Want to use Django Class Based Views but unhappy with the missing components like &lt;tt class="docutils literal"&gt;LoginRequiredMixin&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;SelectRelatedMixin&lt;/tt&gt;, and even &lt;tt class="docutils literal"&gt;StaffuserRequiredMixin&lt;/tt&gt;? Not to worry, as this library will make Django CBVs &lt;strong&gt;134% easier to use&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-secure-0-1-2"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-secure/"&gt;django-secure==0.1.2&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Django is rather secure, but there is a checklist of things that the security experts want you to do.
Save yourself forgetting something and use this library to do all those little things.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-profiletools-0-1-3"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-profiletools/"&gt;django-profiletools==0.1.3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Have you ever used the django-debug-toolbar and noticed that you did that same &lt;tt class="docutils literal"&gt;request.user.get_profile()&lt;/tt&gt; call
a dozen times? Ever want to just call that once? This library, by yours truly, resolves the issue. It loads the user's
profile object once, and then passes it down the request chain.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="existing-packages"&gt;
&lt;h2&gt;Existing Packages&lt;/h2&gt;
&lt;div class="section" id="django-1-4-1"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/Django/1.4.1"&gt;Django==1.4.1&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you need sessions, forms, templates, and relational database models, then I can argue you've got the ideal &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; project.
Make certain you are running the latest Django version (1.4.1). If you have any reason to stick to the Django 1.3 series, I advise
bumping it up to Django 1.3.2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="psycopg2-2-4-5"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/psycopg2"&gt;psycopg2==2.4.5&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the database connector to PostgreSQL, which is what you should be using. Django is known for playing 'nicer'
with PostgreSQL than say... MySQL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-debug-toolbar-0-9-4"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-debug-toolbar"&gt;django-debug-toolbar==0.9.4&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Because not using this tool is insane.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-extensions-0-8"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-extensions"&gt;django-extensions==0.8&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Because amongst other things this library gives you, I never want to write my own &lt;tt class="docutils literal"&gt;TimeStampedModel&lt;/tt&gt; ever again. :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="south-0-7-6"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/South"&gt;South==0.7.6&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Django gives you the freedom to migrate data in the way you want. The way I want to do it is via South.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-registration-0-8-0"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-registration"&gt;django-registration==0.8.0&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The common go-to tool for non-Social registration.&lt;/p&gt;
&lt;p&gt;This is a very solid tool, but you do have to make your own templates or find someone's fork that has a copy of templates that match.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-social-auth-0-7-4"&gt;
&lt;h3&gt;django-social-auth== 0.7.4&lt;/h3&gt;
&lt;p&gt;Want to authenticate via Twitter, Facebook, or GitHub? Then use this very useful package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-floppyforms-1-0"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-floppyforms"&gt;django-floppyforms==1.0&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An excellent tool for making your forms HTML5-ish out of the box. It allows full control of form rendering in the templates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-crispy-forms-1-1-4"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-crispy-forms"&gt;django-crispy-forms==1.1.4&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The child of my own django-uni-forms, this will let me create forms using div-based controls super fast, and do layout customizations if I need them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-heroku-postgresify-0-2"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-heroku-postgresify"&gt;django-heroku-postgresify==0.2&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This tool makes getting the PostGreSQL settings out of Heroku trivial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-heroku-memcacheify-0-3"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-heroku-memcacheify"&gt;django-heroku-memcacheify==0.3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This tool makes getting the memcache settings for Heroku trivial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gunicorn-0-14-6"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/gunicorn"&gt;gunicorn==0.14.6&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All the cool kids who play in devops swear by Gunicorn.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="installing-the-above-packages"&gt;
&lt;h2&gt;Installing the above packages&lt;/h2&gt;
&lt;p&gt;Never copy/paste these libraries directly into your projects. Do it the right way: &lt;strong&gt;use proper Python dependency management&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Create a &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; file and install them as proper dependencies. The file should contain the following text:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Django==1.4.1
South==0.7.5
django-braces==0.1.3
django-crispy-forms==1.1.4
django-debug-toolbar==0.9.4
django-extensions==0.8
django-floppyforms==1.0
django-social-auth==0.7.4
django-heroku-memcacheify==0.3
django-heroku-postgresify==0.2
django-profiletools==0.1.3
django-registration==0.8.0
django-secure==0.1.2
gunicorn==0.14.2
psycopg2==2.4.5
&lt;/pre&gt;
&lt;p&gt;Once you have that, you install them thus in your &lt;a class="reference external" href="http://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install -r requirements.txt
&lt;/pre&gt;
&lt;p&gt;Now that I have all this, it's time to code!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="djangodash"></category><category term="setup"></category></entry><entry><title>Django Requirements for a project</title><link href="https://pydanny.com/django-requirements-for-a-project.html" rel="alternate"></link><updated>2012-05-09T08:00:00-07:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:pydanny.com,2012-05-09:django-requirements-for-a-project.html</id><summary type="html">&lt;p&gt;Today I'm starting a new project. I'm working as fast as I can and hope to launch on Friday. What are my package dependencies?&lt;/p&gt;
&lt;div class="section" id="django-1-4"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/Django/1.4"&gt;Django==1.4&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unlike my last quick project which was &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, this effort really falls into &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt;'s sweet spot. I need sessions, forms, templates, and models to do things in an ideal Django pattern.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="psycopg2-2-4-5"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/psycopg2"&gt;psycopg2==2.4.5&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I need transactions and hard-type validation in the database, which means PostgreSQL. If I didn't need transactions or the hard-type validation I would consider MongoDB instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-debug-toolbar-0-9-4"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-debug-toolbar"&gt;django-debug-toolbar==0.9.4&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Because not using this tool is insane.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-extensions-0-8"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-extensions"&gt;django-extensions==0.8&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Because amongst other things this library gives you, I never want to write my own &lt;tt class="docutils literal"&gt;TimeStampedModel&lt;/tt&gt; ever again. :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="south-0-7-5"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/South"&gt;South==0.7.5&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Django gives you the freedom to migrate data in the way you want. The way I want to do it is via South.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-registration-0-8-0"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-registration"&gt;django-registration==0.8.0&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Normally &lt;a class="reference external" href="http://pypi.python.org/pypi/django-social-auth"&gt;django-social-auth&lt;/a&gt; is my go-to tool for registration, but in this case I need simple username/password registration. This is a very solid tool, but you do have to make your own templates or find someone's fork that has a copy of templates that match.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2013/12/17&lt;/strong&gt;: django-registration is no longer maintained and doesn't entirely work with modern Django's new user model system. Use &lt;a class="reference external" href="https://github.com/pennersr/django-allauth"&gt;django-allauth&lt;/a&gt; instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-floppyforms-0-4-7"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-floppyforms"&gt;django-floppyforms==0.4.7&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An excellent tool for making your forms HTML5-ish out of the box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-crispy-forms-1-1-3"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://pypi.python.org/pypi/django-crispy-forms"&gt;django-crispy-forms==1.1.3&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The child of my own django-uni-forms, this will let me create forms using div-based controls super fast, and do layout customizations if I need them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-heroku-postgresify-0-2"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://pypi.python.org/pypi/django-heroku-postgresify"&gt;django-heroku-postgresify==0.2&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This tool makes getting the PostGreSQL settings out of Heroku trivial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-heroku-memcacheify-0-1"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://pypi.python.org/pypi/django-heroku-memcacheify"&gt;django-heroku-memcacheify==0.1&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This tool makes getting the memcache settings for Heroku trivial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gunicorn-0-14-2"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/gunicorn"&gt;gunicorn==0.14.2&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All the cool kids who play in devops swear by Gunicorn. I use it because Heroku seems to recommend it for Django deployments.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="installing-the-above-packages"&gt;
&lt;h2&gt;Installing the above packages&lt;/h2&gt;
&lt;p&gt;Never copy/paste these libraries directly into your projects. If you do that, you'll end up hating yourself later as your local instances become unmaintained forks of the real project. Also, unless you are really careful in your copy/pasting, you'll be in violation of various open source licenses. Odds are the FOSS police aren't going to find you, but I can assure you that when you bring in one of the authors of these packages to help you fix a problem he/she is going to be mighty annoyed at the lack of attribution.&lt;/p&gt;
&lt;p&gt;Do it the right way: do proper Python dependency management.&lt;/p&gt;
&lt;p&gt;Create a &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; file and install them as proper dependencies. The file should contain the following text:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Django==1.4
South==0.7.5
django-crispy-forms==1.1.3
django-debug-toolbar==0.9.4
django-extensions==0.8
django-floppyforms==0.4.7
django-heroku-memcacheify==0.1
django-heroku-postgresify==0.2
django-registration==0.8.0
gunicorn==0.14.2
psycopg2==2.4.5
&lt;/pre&gt;
&lt;p&gt;Once you have that, you install them thus in your &lt;a class="reference external" href="https://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install -r requirements.txt
&lt;/pre&gt;
&lt;p&gt;Now that I have all this, it's time to code!&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;a class="reference external image-reference" href="http://www.flickr.com/photos/pydanny/4358842735/"&gt;&lt;img alt="http://farm5.staticflickr.com/4027/4358842735_38991c0944.jpg" class="align-center" id="blizzard-of-2010" src="http://farm5.staticflickr.com/4027/4358842735_38991c0944.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="setup"></category></entry></feed>