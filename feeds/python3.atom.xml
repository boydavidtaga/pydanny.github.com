<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pydanny</title><link href="http://pydanny.com/" rel="alternate"></link><link href="http://pydanny.com/feeds/python3.atom.xml" rel="self"></link><id>http://pydanny.com/</id><updated>2015-11-20T18:30:00-08:00</updated><entry><title>How To Create Installable, Reusable Django Packages</title><link href="http://pydanny.com/how-to-create-installable-django-packages.html" rel="alternate"></link><updated>2015-11-20T18:30:00-08:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:pydanny.com,2015-11-20:how-to-create-installable-django-packages.html</id><summary type="html">&lt;a class="reference external image-reference" href="https://www.pydanny.com/how-to-create-installable-django-packages.html"&gt;&lt;img alt="Django Package Ecosystem: cookiecutter-djangopackage" class="align-center" id="django-package-ecosystem-cookiecutter-djangopackage" src="https://www.pydanny.com/static/django-package-470x246.png" /&gt;&lt;/a&gt;
&lt;p&gt;What I mean by an &amp;quot;installable Django package&amp;quot;: a reusable component that can be shared across Django projects, allowing us to combine our own efforts with others. Some examples include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.djangopackages.com/packages/p/django-test-plus/"&gt;django-test-plus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.djangopackages.com/packages/p/django-crispy-forms/"&gt;django-crispy-forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.djangopackages.com/packages/p/dj-stripe/"&gt;dj-stripe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.djangopackages.com/packages/p/dj-spam/"&gt;dj-spam&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ever want to quickly create a similarly installable Django package to submit to &lt;a class="reference external" href="pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; and &lt;a class="reference external" href="https://wwww.djangopackages.com"&gt;Django Packages&lt;/a&gt;? One that goes beyond the basics described in the &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.8/intro/reusable-apps/"&gt;Django tutorial&lt;/a&gt;? Specifically, a package that includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Test runner so you don't need a example/test project (Although those can be useful).&lt;/li&gt;
&lt;li&gt;The important configuration in place: Travis, editorconfig, gitignore, etc.&lt;/li&gt;
&lt;li&gt;The important documentation in place: Readme, License, Read the Docs-ready Sphinx docs, etc.&lt;/li&gt;
&lt;li&gt;Static files ready to go.&lt;/li&gt;
&lt;li&gt;A base DTL/Jinja2 template ready to go.&lt;/li&gt;
&lt;li&gt;All those other fiddly bits not included in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-admin.py&lt;/span&gt; startapp&lt;/tt&gt; that are hard to remember.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, here's how I do it.&lt;/p&gt;
&lt;div class="section" id="introducing-cookiecutter-djangopackage"&gt;
&lt;h2&gt;Introducing cookiecutter-djangopackage&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pydanny/cookiecutter-djangopackage"&gt;cookiecutter-djangopackage&lt;/a&gt; is a &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;Cookiecutter&lt;/a&gt; template for creating reusable Django packages. Using it is easy:&lt;/p&gt;
&lt;p&gt;First, get &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;Cookiecutter&lt;/a&gt;.  Trust me, it's awesome:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install cookiecutter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now run it against this repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cookiecutter https://github.com/pydanny/cookiecutter-djangopackage.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You'll be prompted to enter some values. Enter them. Then an installable Django package will be built for you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: &lt;tt class="docutils literal"&gt;app_name&lt;/tt&gt; must be a valid Python module name or you will have issues on imports.&lt;/p&gt;
&lt;p&gt;Enter the new package (in my case, I called it 'newpackage') and look around. Open up the &lt;tt class="docutils literal"&gt;AUTHORS.rst&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;, or &lt;tt class="docutils literal"&gt;README.rst&lt;/tt&gt; files and you'll see your input inserted into the appropriate locations.&lt;/p&gt;
&lt;p&gt;Speaking of the &lt;tt class="docutils literal"&gt;README.rst&lt;/tt&gt;, that file includes instructions for putting the new package on &lt;a class="reference external" href="pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; and &lt;a class="reference external" href="https://wwww.djangopackages.com"&gt;Django Packages&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;newpackage
├── .editorconfig
├── .gitignore
├── .travis.yml
├── AUTHORS.rst
├── CONTRIBUTING.rst
├── HISTORY.rst
├── LICENSE
├── MANIFEST.in
├── Makefile
├── README.rst
├── newpackage
│   ├── __init__.py
│   ├── models.py
│   ├── static
│   │   ├── css
│   │   │   └── newpackage.css
│   │   ├── img
│   │   │   └── .gitignore
│   │   └── js
│   │       └── newpackage.js
│   └── templates
│       └── cheese
│           └── base.html
├── docs
│   ├── Makefile
│   ├── authors.rst
│   ├── conf.py
│   ├── contributing.rst
│   ├── history.rst
│   ├── index.rst
│   ├── installation.rst
│   ├── make.bat
│   ├── readme.rst
│   └── usage.rst
├── requirements-test.txt
├── requirements.txt
├── requirements_dev.txt
├── runtests.py
├── setup.cfg
├── setup.py
├── tests
│   ├── __init__.py
│   └── test_models.py
└── tox.ini
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, instead of monkeying around for awhile doing copy/paste package setup, I'm immediately ready to write code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pydanny/cookiecutter-djangopackage"&gt;cookiecutter-djangopackage&lt;/a&gt; does a lot, but even with its tight focus on package creation it could do more. Some of the things I would love to see included in the future:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Option for Appveyor CI support&lt;/li&gt;
&lt;li&gt;Option to replace &lt;tt class="docutils literal"&gt;django.test&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;py.test&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Generation of model boilerplate, admin, and CRUD views.&lt;/li&gt;
&lt;li&gt;More in the &lt;a class="reference external" href="https://github.com/pydanny/cookiecutter-djangopackage/issues"&gt;issue tracker&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Try it out and let me know what you think. I'm open to new ideas and receiving pull requests.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="python3"></category><category term="django"></category><category term="cheatsheet"></category><category term="ppoftw"></category><category term="djangopackages"></category></entry><entry><title>Python Decorator Cheatsheet</title><link href="http://pydanny.com/python-decorator-cheatsheet.html" rel="alternate"></link><updated>2015-02-13T18:20:00-08:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:pydanny.com,2015-02-13:python-decorator-cheatsheet.html</id><summary type="html">&lt;p&gt;I can never remember the syntax for writing &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Python_syntax_and_semantics#Decorators"&gt;decorators&lt;/a&gt;. I always have to look it up. Worse, I always have to remember where to look to find references. Hence the reason for this article. I'll never lose this reference: It's on my laptop and the internet.&lt;/p&gt;
&lt;p&gt;Each type will include a basic version, a &lt;tt class="docutils literal"&gt;functools.wraps&lt;/tt&gt; version, and a &lt;a class="reference external" href="https://github.com/GrahamDumpleton/wrapt"&gt;wrapt&lt;/a&gt; version.&lt;/p&gt;
&lt;div class="section" id="decorators-without-arguments"&gt;
&lt;h2&gt;Decorators Without Arguments&lt;/h2&gt;
&lt;p&gt;These are decorators that do not accept arguments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;  &lt;span class="c"&gt;# Part of Python standard library&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped_function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# do something before the function call&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wrapped_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# do something after the function call&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_wrapper&lt;/span&gt;

&lt;span class="c"&gt;# decorator with functools.wraps added&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator_with_wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped_function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped_function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# do something before the function call&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wrapped_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# do something after the function call&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_wrapper&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;wrapt&lt;/span&gt;  &lt;span class="c"&gt;# Requires installing the &amp;#39;wrapt&amp;#39; library&lt;/span&gt;

&lt;span class="c"&gt;# decorator powered by wrapt&lt;/span&gt;
&lt;span class="nd"&gt;@wrapt.decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator_with_wrapt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# do something before the function call&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wrapped_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# do something after the function call&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_decorators&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="nd"&gt;@decorator&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;I&amp;#39;&lt;/span&gt;

    &lt;span class="nd"&gt;@decorator_with_wraps&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;

    &lt;span class="nd"&gt;@decorator_with_wrapt&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;I&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="decorators-with-arguments"&gt;
&lt;h2&gt;Decorators With Arguments&lt;/h2&gt;
&lt;p&gt;These are decorators that accept arguments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;arguments_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_outer_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped_function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c"&gt;# do something before the function call&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wrapped_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c"&gt;# do something after the function call&lt;/span&gt;

            &lt;span class="c"&gt;# Demonstrating what you can do with decorator arguments&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_wrapper&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_outer_wrapper&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;arguments_decorator_with_wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_outer_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped_function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped_function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c"&gt;# do something before the function call&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wrapped_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c"&gt;# do something after the function call&lt;/span&gt;

            &lt;span class="c"&gt;# Demonstrating what you can do with decorator arguments&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_wrapper&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_outer_wrapper&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;arguments_decorator_with_wrapt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@wrapt.decorator&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# do something before the function call&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wrapped_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# do something after the function call&lt;/span&gt;

        &lt;span class="c"&gt;# Demonstrating what you can do with decorator arguments&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_wrapper&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_arguments_decorators&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="nd"&gt;@arguments_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func4&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;We&amp;#39;&lt;/span&gt;

    &lt;span class="nd"&gt;@arguments_decorator_with_wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func5&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;

    &lt;span class="nd"&gt;@arguments_decorator_with_wrapt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func6&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;func4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;WeWeWeWeWeWe&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;func5&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;codecodecodecode&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;func6&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pythonpythonpythonpythonpythonpython&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This article is a cheatsheet, not a tutorial.&lt;/p&gt;
&lt;p&gt;Instead of explaining why Python has &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Python_syntax_and_semantics#Decorators"&gt;decorators&lt;/a&gt;, how to use them, how they work, or why to use them, this article is a reference. Nothing more.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Graham Dumpleton's &lt;a class="reference external" href="https://github.com/GrahamDumpleton/wrapt/tree/develop/blog"&gt;voluminious series on decorators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Graham Dumpleton's &lt;a class="reference external" href="https://github.com/GrahamDumpleton/wrapt/blob/develop/blog/01-how-you-implemented-your-python-decorator-is-wrong.md#introspecting-a-function"&gt;Introspecting a function&lt;/a&gt; article on decorators for concerns about &lt;tt class="docutils literal"&gt;functools.wraps&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.python.org/moin/PythonDecoratorLibrary"&gt;https://wiki.python.org/moin/PythonDecoratorLibrary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="https://pydanny.com/static/sample-rst.png" class="align-center" id="packages" src="https://pydanny.com/static/sample-rst.png" /&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="python3"></category><category term="cheatsheet"></category><category term="ppoftw"></category></entry><entry><title>Building Conda Packages for Multiple Operating Systems</title><link href="http://pydanny.com/building-conda-packages-for-multiple-operating-systems.html" rel="alternate"></link><updated>2015-01-29T18:00:00-08:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:pydanny.com,2015-01-29:building-conda-packages-for-multiple-operating-systems.html</id><summary type="html">&lt;p&gt;On the &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;Cookiecutter&lt;/a&gt; project, recently we added &lt;a class="reference external" href="http://conda.pydata.org/"&gt;conda&lt;/a&gt; to the open source packaging systems we officially support (You can find Cookiecutter on &lt;a class="reference external" href="https://pypi.python.org/pypi/cookiecutter"&gt;PyPI&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/Homebrew/homebrew/blob/master/Library/Formula/cookiecutter.rb"&gt;homebrew&lt;/a&gt;, and apparently some Linux distros).&lt;/p&gt;
&lt;div class="section" id="creating-a-conda-recipe-from-a-pypi-package"&gt;
&lt;h2&gt;Creating a conda recipe from a PyPI package&lt;/h2&gt;
&lt;p&gt;Prequisites:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A &lt;a class="reference external" href="http://conda.pydata.org/miniconda.html#miniconda"&gt;conda binary&lt;/a&gt; installed.&lt;/li&gt;
&lt;li&gt;A package deployed to &lt;a class="reference external" href="https://pypi.python.org/pypi/cookiecutter"&gt;PyPI&lt;/a&gt; (in our case, &lt;a class="reference external" href="https://pypi.python.org/pypi/cookiecutter/0.9.1"&gt;https://pypi.python.org/pypi/cookiecutter/0.9.1&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once those are ready, create a conda recipe for Cookiecutter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;conda skeleton pypi cookiecutter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create a conda recipe, which is a directory named &lt;tt class="docutils literal"&gt;cookiecutter&lt;/tt&gt; that contains several text files.&lt;/p&gt;
&lt;p&gt;Inside the new &lt;tt class="docutils literal"&gt;cookiecutter&lt;/tt&gt; recipe directory, find the &lt;tt class="docutils literal"&gt;meta.yaml&lt;/tt&gt; file and change the appropriate sections to have this content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;source&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Change to match the most recent release&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;git_tag&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;0.9.1&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;git_url&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;https://github.com/audreyr/cookiecutter.git&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;package&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;cookiecutter&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;version&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;environ&lt;/span&gt;&lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;GIT_DESCRIBE_TAG&amp;#39;&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt; &lt;span class="p-Indicator"&gt;}}&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;build&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;number&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;environ.get(&amp;#39;GIT_DESCRIBE_NUMBER&amp;#39;&lt;/span&gt;&lt;span class="p-Indicator"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;0)&lt;/span&gt; &lt;span class="p-Indicator"&gt;}}&lt;/span&gt;

    &lt;span class="c1"&gt;# Note that this will override the default build string with the Python&lt;/span&gt;
    &lt;span class="c1"&gt;# and NumPy versions&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;string&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;environ.get(&amp;#39;GIT_BUILD_STR&amp;#39;&lt;/span&gt;&lt;span class="p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;)&lt;/span&gt; &lt;span class="p-Indicator"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="building-a-conda-package"&gt;
&lt;h2&gt;Building a conda package&lt;/h2&gt;
&lt;p&gt;Use the conda recipe to build a package for my operating system (in this case, Mac OS X):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;conda build cookiecutter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This creates a Cookiecutter conda package at &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/miniconda/conda-bld/osx-64/cookiecutter-0.9.1_BUILDNUM.tar.bz2&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The official conda recipe for &lt;strong&gt;cookiecutter&lt;/strong&gt; is at &lt;a class="reference external" href="https://github.com/conda/conda-recipes/tree/master/cookiecutter"&gt;https://github.com/conda/conda-recipes/tree/master/cookiecutter&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="converting-the-conda-package-to-other-systems"&gt;
&lt;h2&gt;Converting the conda package to other systems&lt;/h2&gt;
&lt;p&gt;Let's convert that to Windows and Linux systems:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;conda convert ~/miniconda/conda-bld/osx-64/cookiecutter-0.9.1_BUILDNUM.tar.bz2 -p all
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This creates five new directories, each with a new package. It looks something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls
linux-32
linux-64
osx-64
win-32
win-64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each one of these directories contains a conda build also named &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cookiecutter-0.9.1_BUILDNUM.tar.bz2&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I never left the Mac OSX operating system, yet I have packages that are pretty much garaunteed to work on Windows and Linux. That said, Cookiecutter is pure python and it's dependencies already have conda packages. I haven't tried this yet on anything that includes compiling C or C++, much less Fortran.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="uploading-conda-packages-to-binstar"&gt;
&lt;h2&gt;Uploading conda packages to Binstar&lt;/h2&gt;
&lt;p&gt;With these packages created, it's time to upload them to &lt;a class="reference external" href="http://binstar.org"&gt;binstar&lt;/a&gt;, the primary conda package index.&lt;/p&gt;
&lt;p&gt;First, &lt;a class="reference external" href="https://binstar.org/account/register"&gt;register your binstar account&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then use conda to install the binstar client:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;conda install binstar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, start uploading the new packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;binstar upload linux-32/cookiecutter-0.9.1-BUILDNUM.tar.bz2
&lt;span class="nv"&gt;$ &lt;/span&gt;binstar upload linux-64/cookiecutter-0.9.1-BUILDNUM.tar.bz2
&lt;span class="nv"&gt;$ &lt;/span&gt;binstar upload osx-64/cookiecutter-0.9.1-BUILDNUM.tar.bz2
&lt;span class="nv"&gt;$ &lt;/span&gt;binstar upload win-32/cookiecutter-0.9.1-BUILDNUM.tar.bz2
&lt;span class="nv"&gt;$ &lt;/span&gt;binstar upload win-64/cookiecutter-0.9.1-BUILDNUM.tar.bz2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://binstar.org/pydanny/cookiecutter"&gt;Check out the results of my work&lt;/a&gt; or take a look right below at what's on &lt;a class="reference external" href="http://binstar.org"&gt;binstar&lt;/a&gt;:&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://binstar.org/search?q=cookiecutter"&gt;&lt;img alt="https://pydanny.com/static/packages.png" class="align-center" id="packages" src="https://pydanny.com/static/packages.png" style="width: 500px; height: 138px;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="try-installing-cookiecutter-with-conda"&gt;
&lt;h2&gt;Try installing Cookiecutter with conda!&lt;/h2&gt;
&lt;p&gt;If you have &lt;strong&gt;conda&lt;/strong&gt; installed, you should be able to get Cookiecutter thus:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;conda config --add channels https://conda.binstar.org/pydanny
&lt;span class="nv"&gt;$ &lt;/span&gt;conda install cookiecutter
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Writing about how to package software is hard, so figuring this out was a &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter/issues/232#issuecomment-71552905"&gt;bit of detective work&lt;/a&gt;. I think that's going to change, as the company behind conda, &lt;a class="reference external" href="http://www.continuum.io/"&gt;Continuum Analytics&lt;/a&gt; has stated their intentions to improve conda's documentation. Furthermore, just as many &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter#python"&gt;for-python cookiecutter templates&lt;/a&gt; include carefully researched &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; modules for use with &lt;tt class="docutils literal"&gt;distutils&lt;/tt&gt;, in 2015 I think we'll begin to see many of these templates include carefully research conda recipes and instructions.&lt;/p&gt;
&lt;p&gt;Many thanks go to &lt;a class="reference external" href="https://twitter.com/fperez_org"&gt;Fernando Perez&lt;/a&gt; for inspiring me to actually delve into conda. &lt;a class="reference external" href="https://twitter.com/tswicegood"&gt;Travis Swicegood&lt;/a&gt; gave me some useful pointers. Last, but not least, none of this would have been figured out without the help of &lt;a class="reference external" href="https://twitter.com/westurner"&gt;Wes Turner&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="updates"&gt;
&lt;h2&gt;Updates&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;2015/01/31 - Fixed a broken binstar link thanks to Russ Ferriday.&lt;/li&gt;
&lt;li&gt;2015/01/30 - Wes Turner corrected a couple typos in the conda command statements.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="pypi"></category><category term="python3"></category><category term="conda"></category><category term="cookiecutter"></category><category term="binstar"></category><category term="packaging"></category><category term="howto"></category></entry><entry><title>Cookiecutter: Project Templates Made Easy</title><link href="http://pydanny.com/cookie-project-templates-made-easy.html" rel="alternate"></link><updated>2013-08-17T12:00:00-07:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:pydanny.com,2013-08-17:cookie-project-templates-made-easy.html</id><summary type="html">&lt;p&gt;Yesterday, Jeff Knupp wrote an amazing how-to article called &amp;quot;&lt;a class="reference external" href="http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/"&gt;Open Sourcing a Python Project the Right Way&lt;/a&gt;&amp;quot;. While I was reading it, I was rather pleased by just how close it is to my own practices. Considering Jeff's amazing &lt;a class="reference external" href="http://www.amazon.com/gp/product/B00B5KG0F8/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00B5KG0F8&amp;amp;linkCode=as2&amp;amp;tag=mlinar-20"&gt;Writing&lt;/a&gt; &lt;a class="reference external" href="http://www.amazon.com/gp/product/B00B5VXMRG/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00B5VXMRG&amp;amp;linkCode=as2&amp;amp;tag=mlinar-20"&gt;Idiomatic&lt;/a&gt; &lt;a class="reference external" href="http://www.jeffknupp.com/writing-idiomatic-python-ebook/"&gt;Python&lt;/a&gt;, it meant I was on the right track.&lt;/p&gt;
&lt;p&gt;The downside, of course, is implementation. Creating reusable Python packages has always been annoying. There are no defined/maintained best practices (especially for setup.py), so you end up cutting and pasting hacky, poorly understood, often legacy code from one project to the other. Some of it does nothing and some of it fails catastrophically on Python 3. There's a term for this sort of behavior, and it's called &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cargo_cult_programming"&gt;Cargo Cult programming&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fortunately, while I was &lt;a class="reference external" href="https://pydanny.com/made-up-statistics.html#debate-statistics"&gt;ranting&lt;/a&gt; and &lt;a class="reference external" href="http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/"&gt;Jeff&lt;/a&gt; (and &lt;a class="reference external" href="http://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/"&gt;Hynek Schlawack&lt;/a&gt;) was writing, someone was making &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="cookiecutter-does-one-thing-and-it-does-it-well"&gt;
&lt;h2&gt;cookiecutter does one thing and it does it well&lt;/h2&gt;
&lt;p&gt;What &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt; does is make creating and maintaining project templates easy and intuitive. This allow developers of all languages (not just Python) the ability to break free from cargo-cult configuration and follow patterns dictated by the experts who present their own cookiecutter templates. So if you don't like how the author of cookiecutter's creates her projects, you can use someone else's or roll your own.&lt;/p&gt;
&lt;p&gt;Okay, enough talk, let's use cookiecutter to build a Python project. Assuming you have &lt;a class="reference external" href="http://www.virtualenv.org/"&gt;virtualenv&lt;/a&gt; installed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install cookiecutter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: In the works is a &lt;a class="reference external" href="https://github.com/mxcl/homebrew"&gt;Homebrew&lt;/a&gt; package, and possibly packages for the various Linux distributions as well.&lt;/p&gt;
&lt;p&gt;Done? Okay, now use cookiecutter to create your Python project. For this example, I'm going to create a sample project called &amp;quot;&lt;em&gt;cheese&lt;/em&gt;&amp;quot;.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cookiecutter https://github.com/audreyr/cookiecutter-pypackage.git
Cloning into &lt;span class="s1"&gt;&amp;#39;cookiecutter-pypackage&amp;#39;&lt;/span&gt;...
remote: Counting objects: 183, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;100/100&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Total 183 &lt;span class="o"&gt;(&lt;/span&gt;delta 87&lt;span class="o"&gt;)&lt;/span&gt;, reused 161 &lt;span class="o"&gt;(&lt;/span&gt;delta 70&lt;span class="o"&gt;)&lt;/span&gt;
Receiving objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;183/183&lt;span class="o"&gt;)&lt;/span&gt;, 29.36 KiB | 0 bytes/s, &lt;span class="k"&gt;done&lt;/span&gt;.
Resolving deltas: 100% &lt;span class="o"&gt;(&lt;/span&gt;87/87&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Checking connectivity... &lt;span class="k"&gt;done&lt;/span&gt;
full_name &lt;span class="o"&gt;(&lt;/span&gt;default is &lt;span class="s2"&gt;&amp;quot;Audrey Roy&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;? Daniel Greenfeld
project_name &lt;span class="o"&gt;(&lt;/span&gt;default is &lt;span class="s2"&gt;&amp;quot;your project&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;? cheese
... snip &lt;span class="k"&gt;for &lt;/span&gt;brevity
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See how it asks my full name? Well, at this point, &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt; begins to ask a number of questions. These questions are actually specified in the &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-pypackage/blob/master/cookiecutter.json"&gt;cookiecutter.json&lt;/a&gt; file for &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-pypackage"&gt;cookiecutter-pypackage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you've answered everything that &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-pypackage"&gt;cookiecutter-pypackage&lt;/a&gt; wants, it generates your project. Let's go and check:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tree cheese
cheese/
├── AUTHORS.rst
├── CONTRIBUTING.rst
├── HISTORY.rst
├── LICENSE
├── MANIFEST.in
├── README.rst
├── docs
│   ├── Makefile
│   ├── authors.rst
│   ├── conf.py
│   ├── contributing.rst
│   ├── history.rst
│   ├── index.rst
│   ├── installation.rst
│   ├── make.bat
│   ├── readme.rst
│   └── usage.rst
├── requirements.txt
├── setup.py
├── simplicity
│   ├── __init__.py
│   └── simplicity.py
├── tests
│   ├── __init__.py
│   └── test_simplicity.py
└── tox.ini
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While there are &lt;em&gt;some&lt;/em&gt; differences from Jeff Knupp's example in his &lt;a class="reference external" href="http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/"&gt;article&lt;/a&gt; (ReStructuredText vs Markdown, location of tests, etc), I would argue that the general vision is the same. Better yet, if Jeff (or someone) wants to implement Jeff's pattern, they can.&lt;/p&gt;
&lt;p&gt;In fact...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-cookiecutter-templates-is-easy-and-intuitive"&gt;
&lt;h2&gt;Creating cookiecutter templates is easy and intuitive&lt;/h2&gt;
&lt;p&gt;All you have to do is:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Fork&lt;/strong&gt; &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-pypackage"&gt;cookiecutter-pypackage&lt;/a&gt; &lt;strong&gt;and rename it&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make the changes you desire.&lt;/strong&gt; You can change anything you want, the setup.py, the test handling, or perhaps add or remove from the questions specified in &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-pypackage/blob/master/cookiecutter.json"&gt;cookiecutter.json&lt;/a&gt;. Right now &lt;strong&gt;repo_name&lt;/strong&gt; is a mandatory &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-pypackage/blob/master/cookiecutter.json"&gt;cookiecutter.json&lt;/a&gt; field, but there is an issue submitted to have that changed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remember that renders everything in&lt;/strong&gt; &lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt;. Questions asked by &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-pypackage/blob/master/cookiecutter.json"&gt;cookiecutter.json&lt;/a&gt; are rendered to the project's files (be those files in Python, Javascript, HTML, etc). So if you add a field to &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-pypackage/blob/master/cookiecutter.json"&gt;cookiecutter.json&lt;/a&gt;, all you have to do to see it in a templates is write:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;# Place in Python, HTML. Javascript, CSS, Markdown, or any other plaintext format.&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;cookiecutter.my_new_field&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;&lt;strong&gt;Submit a pull request to&lt;/strong&gt; &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt; asking for their project to be listed on the README.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's not hard. In fact, there is already a growing ecosystem of &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter#available-templates"&gt;cookiecutter templates&lt;/a&gt;, including Python, &lt;a class="reference external" href="https://github.com/sloria/cookiecutter-flask"&gt;Flask&lt;/a&gt;, &lt;a class="reference external" href="https://www.djangopackages.com/grids/g/cookiecutter/"&gt;Django&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-jquery"&gt;JQuery&lt;/a&gt; templates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There is already a &lt;a class="reference external" href="https://github.com/Nekroze/cookiecutter-pypackage"&gt;fork&lt;/a&gt; of cookiecutter-pypackage that even more closely matches Jeff Knupp's design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-cookiecutter-features"&gt;
&lt;h2&gt;Additional cookiecutter features&lt;/h2&gt;
&lt;p&gt;Here are more things to like about cookiecutter:&lt;/p&gt;
&lt;div class="section" id="cookiecutter-is-focused"&gt;
&lt;h3&gt;cookiecutter is focused&lt;/h3&gt;
&lt;p&gt;It doesn't handle deployment, serving of HTTP, testing, or anything else. All it does is project templates. It follows those classic words, &amp;quot;&lt;em&gt;It's programmed to do one thing and do it well&lt;/em&gt;&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="supports-all-modern-versions-of-python"&gt;
&lt;h3&gt;Supports all modern versions of Python&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 2.6&lt;/li&gt;
&lt;li&gt;Python 2.7&lt;/li&gt;
&lt;li&gt;Python 3.3&lt;/li&gt;
&lt;li&gt;Even PyPy!&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cookiecutter-is-modular"&gt;
&lt;h3&gt;cookiecutter is modular&lt;/h3&gt;
&lt;p&gt;It's not built off a single giant function, or a complex architecture. Instead, it's comprised of a number of relatively simple functions. Why? Well this way you can import easily elements of cookiecutter into other projects, and it plays into the next feature:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cookiecutter-is-tested"&gt;
&lt;h3&gt;cookiecutter is tested&lt;/h3&gt;
&lt;p&gt;The project has as of August 20th 2013, &lt;a class="reference external" href="https://coveralls.io/r/audreyr/cookiecutter?branch=master"&gt;98% test coverage&lt;/a&gt;, with an intention to increase it to 100%. This makes handling the following things much easier/safer:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Implementing new features without breaking existing ones.&lt;/li&gt;
&lt;li&gt;Handling new versions of Python as they emerge.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="cookiecutter-isn-t-just-for-python-packages"&gt;
&lt;h3&gt;cookiecutter isn't just for Python packages&lt;/h3&gt;
&lt;p&gt;That's correct. While at the moment there is only &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-jquery"&gt;cookiecutter-jquery&lt;/a&gt;, there is nothing to stop developers from using &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt; to create templates for anything. The way it renders output is designed to accommodate customizations for any tool.&lt;/p&gt;
&lt;p&gt;Which brings me to my next point...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cookiecutter-isn-t-just-for-python-developers"&gt;
&lt;h3&gt;cookiecutter isn't just for Python developers&lt;/h3&gt;
&lt;p&gt;Even if you don't know Python you can use &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt;. The templating is done via &lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt;, which isn't far off from other template languages like Mustache, Handlebars, or Liquid. if you are worried about collisions between templating systems, just use Jinja2's &lt;cite&gt;{% raw %}&lt;/cite&gt; template tag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;{# Jinja2&amp;#39;s raw template to escape the Liquid template inside #}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;raw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; {# Liquid template from here on #}
&amp;lt;ul id=&amp;quot;products&amp;quot;&amp;gt;
{% for product in products %}
&amp;lt;li&amp;gt;
  &amp;lt;h2&amp;gt;{{ product.title }}&amp;lt;/h2&amp;gt;
  Only {{ product.price | format_as_money }}

  &amp;lt;p&amp;gt;{{ product.description | prettyprint | truncate: 200  }}&amp;lt;/p&amp;gt;

&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endraw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;a class="reference external image-reference" href="https://github.com/audreyr/cookiecutter"&gt;&lt;img alt="https://raw.github.com/audreyr/cookiecutter/aa309b73bdc974788ba265d843a65bb94c2e608e/cookiecutter_medium.png" src="https://raw.github.com/audreyr/cookiecutter/aa309b73bdc974788ba265d843a65bb94c2e608e/cookiecutter_medium.png" /&gt;&lt;/a&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Update 09/20/2013&lt;/strong&gt;: Test coverage increased to 98% from 91%.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="rant"></category><category term="flask"></category><category term="pypi"></category><category term="pypy"></category><category term="python3"></category><category term="javascript"></category><category term="audrey"></category><category term="cookiecutter"></category></entry><entry><title>My experiences with Django and Python 3</title><link href="http://pydanny.com/experiences-with-django-python3.html" rel="alternate"></link><updated>2013-07-11T16:00:00-07:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:pydanny.com,2013-07-11:experiences-with-django-python3.html</id><summary type="html">&lt;p&gt;The following are my notes, observations, and resources on the subject of working with Python 3 (with or without Django).&lt;/p&gt;
&lt;p&gt;Recently I've become involved in a couple of Django efforts that used Python 3.3. The quick summary of what I learned is pretty much what I expected: Out of the box Django 1.5 (and the pending 1.6 release) works fine with Python 3.3.2.&lt;/p&gt;
&lt;div class="section" id="use-python-3-3-2"&gt;
&lt;h2&gt;Use Python 3.3.2!&lt;/h2&gt;
&lt;p&gt;Myself and others have encountered problems with using Django 1.5+ and earlier versions of Python 3. The issues can be tricky; for example &lt;tt class="docutils literal"&gt;syncdb&lt;/tt&gt; fails in curious ways on Python 3.3.0.&lt;/p&gt;
&lt;p&gt;The answer, for me, is to use Python 3.3.2 and don't look back.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="checking-for-python-3-compatibility"&gt;
&lt;h2&gt;Checking for Python 3 Compatibility&lt;/h2&gt;
&lt;p&gt;The steps I use are below. They are in rough order:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Look up the package on &lt;a class="reference external" href="https://pypi.python.org/pypi/"&gt;PyPI&lt;/a&gt; and see if any of it's trove classifiers mention Python 3 status.&lt;/li&gt;
&lt;li&gt;See if a pull request for Python 3 support is outstanding.&lt;/li&gt;
&lt;li&gt;Run the test suite using Python 3.3&lt;/li&gt;
&lt;li&gt;Use &lt;a class="reference external" href="http://docs.python.org/2/library/2to3.html"&gt;2to3&lt;/a&gt; to scan the code for issues.&lt;/li&gt;
&lt;li&gt;If a Django project, check the models for &lt;tt class="docutils literal"&gt;__str__()&lt;/tt&gt; methods. If it has them, it's a pretty good indicator it's Python 3.3 friendly.&lt;/li&gt;
&lt;li&gt;Make a judgement call.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="important-packages-that-work-with-python-3"&gt;
&lt;h2&gt;Important Packages that work with Python 3&lt;/h2&gt;
&lt;p&gt;In this section I'm listing a few of the Python and Django packages I'm using that worked without me having to do anything sort of modification or pull request:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django 1.5 and 1.6 beta&lt;/li&gt;
&lt;li&gt;Pillow (drop-in replacement for PIL)&lt;/li&gt;
&lt;li&gt;South&lt;/li&gt;
&lt;li&gt;django-bootstrap-registration (templates for django-registration)&lt;/li&gt;
&lt;li&gt;django-braces&lt;/li&gt;
&lt;li&gt;django-crispy-forms&lt;/li&gt;
&lt;li&gt;requests&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conversion-process"&gt;
&lt;h2&gt;Conversion process&lt;/h2&gt;
&lt;p&gt;How I convert Python 2 code to Python 3:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use 2to3 until you get used to not using it.&lt;/li&gt;
&lt;li&gt;Fix any problems you find in the code. Try to keep solutions as simple as possible.&lt;/li&gt;
&lt;li&gt;Submit the pull request.&lt;/li&gt;
&lt;li&gt;Politely poke the package owner to accept the pull request.&lt;/li&gt;
&lt;li&gt;Once the owner accepts the pull request, gently poke the package owner to push the update to PyPI.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="packages-that-needed-conversion"&gt;
&lt;h2&gt;Packages that needed conversion&lt;/h2&gt;
&lt;p&gt;Here are four packages worth noting that had to be converted:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;unicode-slugify&lt;/li&gt;
&lt;li&gt;django-registration&lt;/li&gt;
&lt;li&gt;django-stripe-payments (in progress)&lt;/li&gt;
&lt;li&gt;django-nose&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's get into some detail for each package:&lt;/p&gt;
&lt;div class="section" id="unicode-slugify"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://pypi.python.org/pypi/unicode-slugify"&gt;unicode-slugify&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a handy, more unicode friendly replacement for Django's &lt;cite&gt;django.utils.text.slugify&lt;/cite&gt; function. It failed on Django 1.6 beta, so I forked it, submitted a successful pull request after testing it on Python 2.6, 2.7, and Python 3.3.2. The Mozilla team pushed it to PyPI and even gave me &lt;a class="reference external" href="https://badges.mozilla.org/en-US/profiles/profile/pydanny"&gt;badges&lt;/a&gt; for my efforts!&lt;/p&gt;
&lt;p&gt;In the future I would like to see this little package work without the dependency of Django itself, and I've had a couple replacement dependencies suggested.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-registration"&gt;
&lt;h3&gt;django-registration&lt;/h3&gt;
&lt;p&gt;With the 1.0 release, it's been updated for Django 1.5, &lt;em&gt;unless&lt;/em&gt; you use customized User models or Python 3. I really needed this on PyPI, but the maintainer is very busy. Therefore, I forked the project, renamed it to &lt;a class="reference external" href="https://pypi.python.org/pypi/django-reg"&gt;django-reg&lt;/a&gt; while referencing the original, and pushed it to PyPI. Not ideal, but sometimes you have to do what you have to do.&lt;/p&gt;
&lt;p&gt;Lesson learned: In the future skip these issues and just use &lt;a class="reference external" href="https://pypi.python.org/pypi/django-allauth"&gt;django-allauth&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 08/08/2013&lt;/strong&gt;: All my Python 3 work is now on django-allauth. This way I don't have to do the work of maintaining a compatibility branch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-stripe-payments-in-progress"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://pypi.python.org/pypi/django-stripe-payments"&gt;django-stripe-payments&lt;/a&gt; (in progress)&lt;/h3&gt;
&lt;p&gt;While django-zebra is better known for handling stripe payments, I prefer to use Eldarion's excellent, well-maintained and tested django-stripe-payments. It was delayed because django-nose wasn't Python 3 compatible, but that's been fixed as of at least 7/28/2013. Unfortunately, it's Travis-CI tests fail with the Django 1.5 era custom user model because of what might be a linter misconfiguration. In theory, the just released version of pylint (1.0) should work without any problems.&lt;/p&gt;
&lt;p&gt;Of course, I informed the maintainers of my efforts and problems.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 07/30/2013&lt;/strong&gt;: Updated the text to reflect the current status of the linter problems I'm having.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 08/08/2013&lt;/strong&gt;: While django-stripe-payments is useful, it doesn't do everything that I need. I tried extending it's logic into a third app, but that was proving unweildy. Therefore, I forked the project to &lt;a class="reference external" href="https://pypi.python.org/pypi/dj-stripe"&gt;dj-stripe&lt;/a&gt;, which has the features and compatibility that I need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-nose"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://pypi.python.org/pypi/django-nose"&gt;django-nose&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Today, I asked the maintainer to visit an outstanding pull request that adds Python 3 compatibility. It's a good idea to do this since they might already be working on it, or may have observations they want to share.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 7/28/2013&lt;/strong&gt;: Jeff Balogh pushed a Python 3.3.2+ compatible version up to PyPI a few days ago. Makes everything so much better!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dealing-with-slow-maintainers"&gt;
&lt;h2&gt;Dealing with Slow Maintainers&lt;/h2&gt;
&lt;p&gt;For what it's worth, from experience ranting to or about slow-moving maintainers is absolutely counter-productive. People have lives and jobs that sometimes get in the way of open source. It's more productive to be patient, be polite, and if necessary do an absolutely minimal fork or find a working alternative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="handy-resources"&gt;
&lt;h2&gt;Handy Resources&lt;/h2&gt;
&lt;p&gt;The following are two useful resources on converting Python 2 to Python 3. I don't follow their methods exactly, I just use them as rough guidelines for my own workflow.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/cJMGvAYYUyY"&gt;Porting Django apps to Python 3&lt;/a&gt; video by Jacob Kaplan-Moss&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python3porting.com/"&gt;Porting to Python 3&lt;/a&gt; book (free HTML or paid PDF, Kindle, ePub) by Lennart Regebro&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For various Python 3 recipes, I keep my kindle reader open to this priceless gem:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/Python-Cookbook-ebook/dp/B00DQV4GGY/?tag=ihpydanny"&gt;Python Cookbook, 3rd Edition&lt;/a&gt; book by David Beazley and Brian K. JOnes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="closing-thoughts"&gt;
&lt;h2&gt;Closing Thoughts&lt;/h2&gt;
&lt;p&gt;This blog post makes it seems like I've put in a lot of work getting things to Python 3, but that isn't the case at all. In fact, for the most part the transition has been trivial. There are a few minor hiccups, but nothing that's killing a whole day or destroying a deadline.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Benefit of using Python 3?&lt;/strong&gt; I get to call myself a &lt;strong&gt;Python 3 Hipster&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Downside of using Python 3?&lt;/strong&gt; A little bit of extra homework on each project. However, each time I fix something it's done and I've made the world a better place.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="python3"></category></entry></feed>