<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pydanny</title><link href="https://www.pydanny.com/" rel="alternate"></link><link href="https://www.pydanny.com/feeds/rant.atom.xml" rel="self"></link><id>https://www.pydanny.com/</id><updated>2013-08-17T12:00:00-07:00</updated><entry><title>Cookiecutter: Project Templates Made Easy</title><link href="https://www.pydanny.com/cookie-project-templates-made-easy.html" rel="alternate"></link><published>2013-08-17T12:00:00-07:00</published><updated>2013-08-17T12:00:00-07:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:https://www.pydanny.com,2013-08-17:cookie-project-templates-made-easy.html</id><summary type="html">&lt;p&gt;Yesterday, Jeff Knupp wrote an amazing how-to article called &amp;quot;&lt;a class="reference external" href="http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/"&gt;Open Sourcing a Python Project the Right Way&lt;/a&gt;&amp;quot;. While I was reading it, I was rather pleased by just how close it is to my own practices. Considering Jeff's amazing &lt;a class="reference external" href="http://www.amazon.com/gp/product/B00B5KG0F8/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00B5KG0F8&amp;amp;linkCode=as2&amp;amp;tag=mlinar-20"&gt;Writing&lt;/a&gt; &lt;a class="reference external" href="http://www.amazon.com/gp/product/B00B5VXMRG/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00B5VXMRG&amp;amp;linkCode=as2&amp;amp;tag=mlinar-20"&gt;Idiomatic&lt;/a&gt; &lt;a class="reference external" href="http://www.jeffknupp.com/writing-idiomatic-python-ebook/"&gt;Python&lt;/a&gt;, it meant I was on the right track.&lt;/p&gt;
&lt;p&gt;The downside, of course, is implementation. Creating reusable Python packages has always been annoying. There are no defined/maintained best practices (especially for setup.py), so you end up cutting and pasting hacky, poorly understood, often legacy code from one project to the other. Some of it does nothing and some of it fails catastrophically on Python 3. There's a term for this sort of behavior, and it's called &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cargo_cult_programming"&gt;Cargo Cult programming&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fortunately, while I was &lt;a class="reference external" href="https://pydanny.com/made-up-statistics.html#debate-statistics"&gt;ranting&lt;/a&gt; and &lt;a class="reference external" href="http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/"&gt;Jeff&lt;/a&gt; (and &lt;a class="reference external" href="http://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/"&gt;Hynek Schlawack&lt;/a&gt;) was writing, someone was making &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="cookiecutter-does-one-thing-and-it-does-it-well"&gt;
&lt;h2&gt;cookiecutter does one thing and it does it well&lt;/h2&gt;
&lt;p&gt;What &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt; does is make creating and maintaining project templates easy and intuitive. This allow developers of all languages (not just Python) the ability to break free from cargo-cult configuration and follow patterns dictated by the experts who present their own cookiecutter templates. So if you don't like how the author of cookiecutter's creates her projects, you can use someone else's or roll your own.&lt;/p&gt;
&lt;p&gt;Okay, enough talk, let's use cookiecutter to build a Python project. Assuming you have &lt;a class="reference external" href="http://www.virtualenv.org/"&gt;virtualenv&lt;/a&gt; installed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install cookiecutter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: In the works is a &lt;a class="reference external" href="https://github.com/mxcl/homebrew"&gt;Homebrew&lt;/a&gt; package, and possibly packages for the various Linux distributions as well.&lt;/p&gt;
&lt;p&gt;Done? Okay, now use cookiecutter to create your Python project. For this example, I'm going to create a sample project called &amp;quot;&lt;em&gt;cheese&lt;/em&gt;&amp;quot;.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cookiecutter https://github.com/audreyr/cookiecutter-pypackage.git
Cloning into &lt;span class="s1"&gt;&amp;#39;cookiecutter-pypackage&amp;#39;&lt;/span&gt;...
remote: Counting objects: &lt;span class="m"&gt;183&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Compressing objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;/100&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Total &lt;span class="m"&gt;183&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;87&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;161&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;70&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Receiving objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;183&lt;/span&gt;/183&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;29&lt;/span&gt;.36 KiB &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; bytes/s, &lt;span class="k"&gt;done&lt;/span&gt;.
Resolving deltas: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;87&lt;/span&gt;/87&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Checking connectivity... &lt;span class="k"&gt;done&lt;/span&gt;
full_name &lt;span class="o"&gt;(&lt;/span&gt;default is &lt;span class="s2"&gt;&amp;quot;Audrey Roy&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;? Daniel Greenfeld
project_name &lt;span class="o"&gt;(&lt;/span&gt;default is &lt;span class="s2"&gt;&amp;quot;your project&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;? cheese
... snip &lt;span class="k"&gt;for&lt;/span&gt; brevity
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See how it asks my full name? Well, at this point, &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt; begins to ask a number of questions. These questions are actually specified in the &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-pypackage/blob/master/cookiecutter.json"&gt;cookiecutter.json&lt;/a&gt; file for &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-pypackage"&gt;cookiecutter-pypackage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you've answered everything that &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-pypackage"&gt;cookiecutter-pypackage&lt;/a&gt; wants, it generates your project. Let's go and check:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tree cheese
cheese/
├── AUTHORS.rst
├── CONTRIBUTING.rst
├── HISTORY.rst
├── LICENSE
├── MANIFEST.in
├── README.rst
├── docs
│   ├── Makefile
│   ├── authors.rst
│   ├── conf.py
│   ├── contributing.rst
│   ├── history.rst
│   ├── index.rst
│   ├── installation.rst
│   ├── make.bat
│   ├── readme.rst
│   └── usage.rst
├── requirements.txt
├── setup.py
├── simplicity
│   ├── __init__.py
│   └── simplicity.py
├── tests
│   ├── __init__.py
│   └── test_simplicity.py
└── tox.ini
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While there are &lt;em&gt;some&lt;/em&gt; differences from Jeff Knupp's example in his &lt;a class="reference external" href="http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/"&gt;article&lt;/a&gt; (ReStructuredText vs Markdown, location of tests, etc), I would argue that the general vision is the same. Better yet, if Jeff (or someone) wants to implement Jeff's pattern, they can.&lt;/p&gt;
&lt;p&gt;In fact...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-cookiecutter-templates-is-easy-and-intuitive"&gt;
&lt;h2&gt;Creating cookiecutter templates is easy and intuitive&lt;/h2&gt;
&lt;p&gt;All you have to do is:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Fork&lt;/strong&gt; &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-pypackage"&gt;cookiecutter-pypackage&lt;/a&gt; &lt;strong&gt;and rename it&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make the changes you desire.&lt;/strong&gt; You can change anything you want, the setup.py, the test handling, or perhaps add or remove from the questions specified in &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-pypackage/blob/master/cookiecutter.json"&gt;cookiecutter.json&lt;/a&gt;. Right now &lt;strong&gt;repo_name&lt;/strong&gt; is a mandatory &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-pypackage/blob/master/cookiecutter.json"&gt;cookiecutter.json&lt;/a&gt; field, but there is an issue submitted to have that changed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remember that renders everything in&lt;/strong&gt; &lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt;. Questions asked by &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-pypackage/blob/master/cookiecutter.json"&gt;cookiecutter.json&lt;/a&gt; are rendered to the project's files (be those files in Python, Javascript, HTML, etc). So if you add a field to &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-pypackage/blob/master/cookiecutter.json"&gt;cookiecutter.json&lt;/a&gt;, all you have to do to see it in a templates is write:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;# Place in Python, HTML. Javascript, CSS, Markdown, or any other plaintext format.&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;cookiecutter.my_new_field&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;&lt;strong&gt;Submit a pull request to&lt;/strong&gt; &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt; asking for their project to be listed on the README.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's not hard. In fact, there is already a growing ecosystem of &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter#available-templates"&gt;cookiecutter templates&lt;/a&gt;, including Python, &lt;a class="reference external" href="https://github.com/sloria/cookiecutter-flask"&gt;Flask&lt;/a&gt;, &lt;a class="reference external" href="https://www.djangopackages.com/grids/g/cookiecutter/"&gt;Django&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-jquery"&gt;JQuery&lt;/a&gt; templates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There is already a &lt;a class="reference external" href="https://github.com/Nekroze/cookiecutter-pypackage"&gt;fork&lt;/a&gt; of cookiecutter-pypackage that even more closely matches Jeff Knupp's design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-cookiecutter-features"&gt;
&lt;h2&gt;Additional cookiecutter features&lt;/h2&gt;
&lt;p&gt;Here are more things to like about cookiecutter:&lt;/p&gt;
&lt;div class="section" id="cookiecutter-is-focused"&gt;
&lt;h3&gt;cookiecutter is focused&lt;/h3&gt;
&lt;p&gt;It doesn't handle deployment, serving of HTTP, testing, or anything else. All it does is project templates. It follows those classic words, &amp;quot;&lt;em&gt;It's programmed to do one thing and do it well&lt;/em&gt;&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="supports-all-modern-versions-of-python"&gt;
&lt;h3&gt;Supports all modern versions of Python&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 2.6&lt;/li&gt;
&lt;li&gt;Python 2.7&lt;/li&gt;
&lt;li&gt;Python 3.3&lt;/li&gt;
&lt;li&gt;Even PyPy!&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cookiecutter-is-modular"&gt;
&lt;h3&gt;cookiecutter is modular&lt;/h3&gt;
&lt;p&gt;It's not built off a single giant function, or a complex architecture. Instead, it's comprised of a number of relatively simple functions. Why? Well this way you can import easily elements of cookiecutter into other projects, and it plays into the next feature:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cookiecutter-is-tested"&gt;
&lt;h3&gt;cookiecutter is tested&lt;/h3&gt;
&lt;p&gt;The project has as of August 20th 2013, &lt;a class="reference external" href="https://coveralls.io/r/audreyr/cookiecutter?branch=master"&gt;98% test coverage&lt;/a&gt;, with an intention to increase it to 100%. This makes handling the following things much easier/safer:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Implementing new features without breaking existing ones.&lt;/li&gt;
&lt;li&gt;Handling new versions of Python as they emerge.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="cookiecutter-isn-t-just-for-python-packages"&gt;
&lt;h3&gt;cookiecutter isn't just for Python packages&lt;/h3&gt;
&lt;p&gt;That's correct. While at the moment there is only &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-jquery"&gt;cookiecutter-jquery&lt;/a&gt;, there is nothing to stop developers from using &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt; to create templates for anything. The way it renders output is designed to accommodate customizations for any tool.&lt;/p&gt;
&lt;p&gt;Which brings me to my next point...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cookiecutter-isn-t-just-for-python-developers"&gt;
&lt;h3&gt;cookiecutter isn't just for Python developers&lt;/h3&gt;
&lt;p&gt;Even if you don't know Python you can use &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt;. The templating is done via &lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt;, which isn't far off from other template languages like Mustache, Handlebars, or Liquid. if you are worried about collisions between templating systems, just use Jinja2's &lt;cite&gt;{% raw %}&lt;/cite&gt; template tag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;{# Jinja2&amp;#39;s raw template to escape the Liquid template inside #}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;raw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; {# Liquid template from here on #}
&amp;lt;ul id=&amp;quot;products&amp;quot;&amp;gt;
{% for product in products %}
&amp;lt;li&amp;gt;
  &amp;lt;h2&amp;gt;{{ product.title }}&amp;lt;/h2&amp;gt;
  Only {{ product.price | format_as_money }}

  &amp;lt;p&amp;gt;{{ product.description | prettyprint | truncate: 200  }}&amp;lt;/p&amp;gt;

&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endraw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;a class="reference external image-reference" href="https://github.com/audreyr/cookiecutter"&gt;&lt;img alt="https://raw.github.com/audreyr/cookiecutter/aa309b73bdc974788ba265d843a65bb94c2e608e/cookiecutter_medium.png" src="https://raw.github.com/audreyr/cookiecutter/aa309b73bdc974788ba265d843a65bb94c2e608e/cookiecutter_medium.png" /&gt;&lt;/a&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Update 09/20/2013&lt;/strong&gt;: Test coverage increased to 98% from 91%.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="rant"></category><category term="flask"></category><category term="pypi"></category><category term="pypy"></category><category term="python3"></category><category term="javascript"></category><category term="audrey"></category><category term="cookiecutter"></category></entry><entry><title>Made Up Statistics</title><link href="https://www.pydanny.com/made-up-statistics.html" rel="alternate"></link><published>2013-07-26T16:00:00-07:00</published><updated>2013-07-26T16:00:00-07:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:https://www.pydanny.com,2013-07-26:made-up-statistics.html</id><summary type="html">&lt;p&gt;Years ago my good friend &lt;a class="reference external" href="https://twitter.com/maraujop"&gt;Miguel Araujo&lt;/a&gt; and I presented on &lt;a class="reference external" href="http://speakerdeck.com/u/pydanny/p/advanced-django-forms-usage"&gt;Advanced Django Form Usage&lt;/a&gt;. &lt;a class="reference external" href="http://www.slideshare.net/pydanny/advanced-django-forms-usage/52"&gt;Slide 18&lt;/a&gt; of that talk mentioned some made up statistics. Here they are for reference:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;91% of Django projects use ModelForms.&lt;/li&gt;
&lt;li&gt;80% ModelForms require trivial logic.&lt;/li&gt;
&lt;li&gt;20% ModelForms require complex logic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Chapter 10 of &lt;a class="reference external" href="http://django.2scoops.org/"&gt;Two Scoops of Django&lt;/a&gt; I expanded on those made up statistics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;95% of Django projects should use ModelForms.&lt;/li&gt;
&lt;li&gt;91% of all Django projects use ModelForms.&lt;/li&gt;
&lt;li&gt;80% of ModelForms require trivial logic.&lt;/li&gt;
&lt;li&gt;20% of ModelForms require complicated logic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Important Disclaimer&lt;/strong&gt;: These numbers were cooked out of thin air by yours truly. I determined them with zero research, they carry absolutely no scientific weight, and shouldn't be used in any serious argument. They are wholly my opinion, which is good or bad depending on your point of view and your own opinion of my opinions.&lt;/p&gt;
&lt;p&gt;With that out of the way, here's a bar graph created from the fictional data I presented with Miguel back in 2011:&lt;/p&gt;
&lt;img alt="static/made-up-statistics.png" class="img-polaroid align-center" id="id1" src="static/made-up-statistics.png" /&gt;
&lt;p&gt;You'll notice that my bar titles could be stronger. I actually did that on purpose in case anyone tries to use that chart in real life. In any case, if you thought that was interesting, then read on. I have many more made-up statistics. For example, here are more numbers I've cooked up:&lt;/p&gt;
&lt;div class="section" id="pydanny-made-up-devops-statistics"&gt;
&lt;h2&gt;Pydanny Made Up DevOps Statistics&lt;/h2&gt;
&lt;p&gt;Thanks to the cloud and a blizzard of hip, new tools, DevOps is the new hotness. I know because every other Python meetup features someone speaking on it - just like every other Ruby, Perl, and PHP meetup. Anyway... numbers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;24.3% of &lt;a class="reference external" href="http://python.org/"&gt;Python&lt;/a&gt; developers doing DevOps think they could have launched a PaaS (aka Heroku clone) before it got crowded.&lt;/li&gt;
&lt;li&gt;46.3% of Python developers doing DevOps spend all their time writing Chef/Puppet scripts and yet still claim to be Python developers.&lt;/li&gt;
&lt;li&gt;14% of Python developers are worried about so much of the backend being done in Ruby, but don't quite trust Salt or Ansible enough to use them.&lt;/li&gt;
&lt;li&gt;54% of Python developers are just happy that there are many options now and don't care about the internal machinery that much.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This time, because I'm worried about the data being taken seriously, I've titled the bar chart in such a way that no one will reference it in anything important:&lt;/p&gt;
&lt;img alt="static/devops.png" class="img-polaroid align-center" id="devops" src="static/devops.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="pydanny-made-up-python-enviroment-statistics"&gt;
&lt;h2&gt;Pydanny Made Up Python Enviroment Statistics&lt;/h2&gt;
&lt;p&gt;Following the obvious logic flow (to me anyway) of DevOps to something else, let's go into Python environments, also known as the &lt;a class="reference external" href="http://pypi.python.org/pypi/virtualenv"&gt;VirtualEnv&lt;/a&gt; vs &lt;a class="reference external" href="http://pypi.python.org/pypi/zc.buildout"&gt;Buildout&lt;/a&gt; debate, which adds up to an even 100% (making it good pie chart material):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;77% of Python Developers prefer VirtualEnv.&lt;/li&gt;
&lt;li&gt;13% of Python Developers prefer Buildout. Many of them don't say this out loud.&lt;/li&gt;
&lt;li&gt;7% of Python developers rolled their own solution and &lt;strong&gt;wish they could switch over.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;3% of Python developers rolled their own solution and are fiendishly delighted with how they have guaranteed their own job security forever. I know who some of you are and I can say with some confidence that when the Zombie apocalypse happens, no one is going to invite you into their fortified compounds. &lt;strong&gt;We hate you that much.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="static/environment.png" class="img-polaroid align-center" id="environment" src="static/environment.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="pydanny-made-up-template-debate-statistics"&gt;
&lt;h2&gt;Pydanny Made Up Template Debate Statistics&lt;/h2&gt;
&lt;p&gt;The made up statistics in this post frequently touch on contentious topics. So let me add another controversial topic, this time the never ending template debate in Python:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;70% of python developers prefer &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.5/ref/templates/"&gt;non-XML&lt;/a&gt; &lt;a class="reference external" href="http://jinja.pocoo.org/docs/"&gt;templates&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;25% of python developers prefer &lt;a class="reference external" href="http://www.makotemplates.org/"&gt;XML&lt;/a&gt; templates.&lt;/li&gt;
&lt;li&gt;5% of python developers wonder why we don't just use the &lt;a class="reference external" href="http://docs.python.org/library/string.html#formatstrings"&gt;str.format()&lt;/a&gt; method and be done with it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The display for this data is a lovely pie chart as seen below. In order to make it appear more useful, I made it a 3-D pie chart:&lt;/p&gt;
&lt;img alt="static/templates.png" class="img-polaroid align-center" id="templates-considerations" src="static/templates.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="pydanny-made-up-python-web-optimization-statistics"&gt;
&lt;h2&gt;Pydanny Made Up Python Web Optimization Statistics&lt;/h2&gt;
&lt;p&gt;I sometimes get asked how to best optimize a Django site. My answer is 'optimize your queries and use caching'. On the other hand, there are those who disagree with me and start switching out Django internals before doing anything silly like looking at I/O.  My bet is this same thing happens with other frameworks such as Flask and Pyramid.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;20% developers argue switching template languages.&lt;/li&gt;
&lt;li&gt;80% developers argue using caching and load balancing.&lt;/li&gt;
&lt;li&gt;100% Django/Pyramid/Flask/etc core developers argue using caching and load balancing.&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="static/optimization.png" class="img-polaroid align-center" id="optimization" src="static/optimization.png" /&gt;
&lt;p&gt;Of all the made up statistics in this blog post, I suspect this is the one closest to the truth of things.&lt;/p&gt;
&lt;span id="debate-statistics"&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class="section" id="pydanny-made-up-debate-statistics"&gt;
&lt;h2&gt;&lt;a class="reference external" href="#debate-statistics"&gt;Pydanny Made Up Debate Statistics&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Alright, let's conclude this article with some statistics I cooked up in regards to various Python related topics.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;95% of developers trying to create reusable Python packages have &lt;strong&gt;no freaking idea&lt;/strong&gt; as to whether or not we should be using setuptools, distribute, or distribute2 and wish there was a &lt;strong&gt;clear explanation on the front page&lt;/strong&gt; of PyPI as to what we should be using and how. Something like a link to the &lt;a class="reference external" href="https://python-packaging-user-guide.readthedocs.org/en/latest/index.html"&gt;Python Packaging User Guide&lt;/a&gt; might be nice!&lt;/li&gt;
&lt;li&gt;99% of us get frustrated with trying to reconcile the pronunciations of PyPI with PyPy.&lt;/li&gt;
&lt;li&gt;97.2% of our family and friends have no idea what Two Scoops of Django is about.&lt;/li&gt;
&lt;li&gt;62% of Python developers are wondering if Tulip will make their projects more web scale.&lt;/li&gt;
&lt;li&gt;49% of Twisted developers wish that Python had accepted their standard instead of PEP-8.&lt;/li&gt;
&lt;li&gt;42% of Python developers think Flask/Pyramid have awesome names that don't get mispronounced the same way Django does.&lt;/li&gt;
&lt;li&gt;28% of Python developers wish they could find a way to get some SciPy into their projects.&lt;/li&gt;
&lt;li&gt;23.6% of us get web.py and web2py confused with each other.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No chart? Getting this one to look meaningful was turning into a herculean effort. I invite others to render this data into something that look attractive and doesn't lose meaning. Come up with something impressive and I'll put it into a follow-up blog post.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is a reprint and update of an earlier &lt;a class="reference external" href="https://pydanny.blogspot.com/2011/12/made-up-statistics.html"&gt;article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Added link to the &lt;a class="reference external" href="https://python-packaging-user-guide.readthedocs.org/en/latest/index.html"&gt;Python Packaging User Guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="rant"></category><category term="flask"></category><category term="pyramid"></category><category term="pypi"></category><category term="pypy"></category></entry><entry><title>We are not using PayPal</title><link href="https://www.pydanny.com/we-are-not-using-paypal.html" rel="alternate"></link><published>2013-03-02T09:00:00-08:00</published><updated>2013-03-02T09:00:00-08:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:https://www.pydanny.com,2013-03-02:we-are-not-using-paypal.html</id><summary type="html">&lt;p&gt;In January &lt;a class="reference external" href="http://audreymroy.com"&gt;Audrey Roy&lt;/a&gt; and I launched a &lt;a class="reference external" href="http://django.2scoops.org"&gt;book&lt;/a&gt; about Django called &lt;a class="reference external" href="http://django.2scoops.org"&gt;Two Scoops of Django: Best Practices for Django 1.5&lt;/a&gt;. We decided to not use PayPal. Here's why:&lt;/p&gt;
&lt;div class="section" id="open-source-events-get-burned-by-paypal"&gt;
&lt;h2&gt;Open Source Events Get Burned By PayPal&lt;/h2&gt;
&lt;p&gt;PayPal has a long, sordid history of freezing the accounts of Python related conferences and events around the world. In fact, this article was born out of the fact &lt;a class="reference external" href="http://blog.djangocircus.com/post/43806402173/back-on-track"&gt;DjangoCon Europe 2013 had its PayPal account frozen&lt;/a&gt;. In the past, &lt;a class="reference external" href="http://2012.djangocon.eu/"&gt;DjangoCon Europe 2012&lt;/a&gt;, Plone Conferences 2008, 2011, and at least one PyCon Australia dealt with the same PayPal problem (DjangoCon 2013 was forewarned and took measures to protect itself). We also have unconfirmed reports of other Python and Django events also running into problems with PayPal freezing accounts. Going with just confirmed conferences having issues with PayPal, this is a combined total of assets in excess of over US$100,000 dollars.&lt;/p&gt;
&lt;p&gt;It's not just a Python issue either, it's an issue that &lt;a class="reference external" href="http://conferencesburnedbypaypal.tumblr.com/"&gt;strikes other open source languages and tools&lt;/a&gt;. It's at the point now where &lt;a class="reference external" href="http://aralbalkan.com/3898/"&gt;conference organizers don't trust PayPal&lt;/a&gt; and make a point telling each other to use alternative payment gateways.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fear-shame-and-paypal"&gt;
&lt;h2&gt;Fear, Shame, and PayPal&lt;/h2&gt;
&lt;p&gt;The terrifying thing to consider is that I suspect that the number of technical conferences affected by PayPal freezes is much, much larger. My reasoning is that &lt;strong&gt;most conferences keep quiet about it&lt;/strong&gt; because &lt;strong&gt;they're afraid that raising a fuss will annoy PayPal's anti-fraud division&lt;/strong&gt;. Let's also face the fact that &lt;strong&gt;most people feel ashamed when bank accounts they are responsible for get frozen&lt;/strong&gt;, so probably don't publicize the issue.&lt;/p&gt;
&lt;p&gt;The usual way conferences deal with these lockouts is conference organizers beg and borrow from friends, family, take second mortgages, local banking institutions, and pray that PayPal will eventually free their account. When you deal with a hostile, inaccessible payment gateway who won't let you provide for the hundreds or even thousands of people who paid you their hard earned money, it's the only way to get by.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-needs-of-paypal-s-anti-fraud-division"&gt;
&lt;h2&gt;The 'Needs' of PayPal's Anti-Fraud Division&lt;/h2&gt;
&lt;p&gt;While I could respect the needs of PayPal's anti-fraud division when dealing with non-fungible products like ticket sales, it's &lt;strong&gt;simply unacceptable&lt;/strong&gt; that prominent conferences for open source projects are treated this way.&lt;/p&gt;
&lt;p&gt;The software represented by these conferences drives the modern e-commerce world, including the myriad of systems that use PayPal to process sales. Yet PayPal continues to burn open source conferences year after year, and we've never heard of any conference outreach by their so-called 'developer evangelists' when a conference's account is frozen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="legal-recourse-against-paypal-is-folly"&gt;
&lt;h2&gt;Legal recourse against PayPal is folly&lt;/h2&gt;
&lt;p&gt;Ask any lawyer and they'll basically say against PayPal you have no options. PayPal has an army of lawyers and in most places isn't a bank, meaning your course of action is constrained from the beginning by your agreeing to PayPal's Terms of Service (TOS). Also, in the United States, their TOS prevents you from joining a class action lawsuit against them. Whether or not that TOS clause is enforceable in court, the fact that it is in their TOS greatly reduces any faith I might have had in them because it paints a picture of a company hostile to my needs.&lt;/p&gt;
&lt;p&gt;In talking to authors and entrepreneurs, we've just heard (and read) too many horror stories. For merchants of non-fungible goods such as digital goods like the e-book I co-authored, PayPal seems even less trustworthy.&lt;/p&gt;
&lt;p&gt;Which means using PayPal places us at an unacceptable risk. We simply don't have the deep pockets to deal with PayPal freezing our funds for sales lost from a more reliable distribution system such as &lt;a class="reference external" href="https://stripe.com"&gt;Stripe&lt;/a&gt; that powers our sales through &lt;a class="reference external" href="https://gumroad.com"&gt;Gumroad&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-is-wrong-to-use-paypal"&gt;
&lt;h2&gt;It is Wrong to Use PayPal&lt;/h2&gt;
&lt;p&gt;Considering PayPal's unacceptable behavior in regards to the open source community I love and merchants who try to work in their system, I feel it is wrong to support PayPal. Audrey agrees, and so our policy of not using PayPal to sell the book is set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="paypal-is-at-risk"&gt;
&lt;h2&gt;PayPal is at Risk&lt;/h2&gt;
&lt;p&gt;There was a day when Microsoft had what seemed to be an unassailable lock on the commercial software world. On many levels, Microsoft is a shadow of its former self, and I contend it wasn't just Apple's competition. Instead, Microsoft's contempt for their own customers and the developer community hurt them just as much.&lt;/p&gt;
&lt;p&gt;PayPal is on the same path of self-destruction. The've gone from the &lt;a class="reference external" href="http://www.amazon.com/The-PayPal-Wars-Battles-Planet/dp/0977898431/?tag=ihpydanny-20"&gt;scrappy company&lt;/a&gt; helping people grow their business to the monolithic overlord that kills businesses and well-meaning events.&lt;/p&gt;
&lt;p&gt;PayPal's demise won't happen this year, or the next, but every time they damage their customer base and the developer community it's another nail in the coffin. I submit that unless PayPal changes its ways, within 5 years PayPal will be a shadow of its former self as the army of growing competitors such as &lt;a class="reference external" href="https://stripe.com"&gt;Stripe&lt;/a&gt;, &lt;a class="reference external" href="https://www.balancedpayments.com/"&gt;Balanced Payments&lt;/a&gt;, &lt;a class="reference external" href="https://www.wepay.com/"&gt;wepay&lt;/a&gt;, and &lt;a class="reference external" href="https://www.payoneer.com/"&gt;Payoneer&lt;/a&gt; expands their availability and options around the world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-paypal-can-do-for-conferences"&gt;
&lt;h2&gt;What PayPal Can Do for Conferences&lt;/h2&gt;
&lt;p&gt;PayPal does have to worry about ticket sales for bogus events, since that  separates people from their money, but identifying real conferences is easy:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;PayPal developer evangelists and community managers need to track every valid developer event in the world. It's the job of people in these roles to have the connections and subject matter expertise to identify real events from fake ones.&lt;/li&gt;
&lt;li&gt;PayPal needs to sponsor these events. Why? See point #3.&lt;/li&gt;
&lt;li&gt;PayPal's anti-fraud division needs to be informed that any PayPal sponsored event is off-limits.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="what-paypal-can-do-for-small-business"&gt;
&lt;h2&gt;What PayPal Can Do for Small Business&lt;/h2&gt;
&lt;p&gt;PayPal has its developer evangelists, community managers, and marketing departments working hard. However, at the end of the day, if you treat your customers with disrespect and a lack of trust, none of that matters. Bad press and market forces will see their revenues drop as customers will migrate to solutions that are more trustworthy and less antagonistic.&lt;/p&gt;
&lt;p&gt;I believe that PayPal needs to revise how its anti-fraud division communicates with people who have frozen accounts. They need to change the adversarial pose they take with their own customers to one that is collaborative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="note"&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;p&gt;If this makes you angry as it did me, take a deep breath and step back. I've found &lt;a class="reference external" href="http://www.amazon.com/gp/product/0807012394/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0807012394&amp;amp;linkCode=as2&amp;amp;tag=ihpydanny-20"&gt;this book&lt;/a&gt; recommended by my friend Randall Degges useful in getting back on track and staying productive.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="twoscoops"></category><category term="python"></category><category term="django"></category><category term="paypal"></category><category term="rant"></category></entry><entry><title>Developer Time</title><link href="https://www.pydanny.com/developer-time.html" rel="alternate"></link><published>2012-12-04T12:00:00-08:00</published><updated>2012-12-04T12:00:00-08:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:https://www.pydanny.com,2012-12-04:developer-time.html</id><summary type="html">&lt;p&gt;This blog post got started with a tweet.&lt;/p&gt;
&lt;p&gt;That tweet got retweeted a lot by developers. And system administrators. And database administrators. And any creative type.&lt;/p&gt;
&lt;p&gt;As of December 7th, 2012, it had been retweeted over 500 times, a personal best. Obviously I struck a chord that resonated with a lot of people.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Developers should have 4-6 hours of uninterrupted activity each day. Each 3-5 minute interruption costs more than you can imagine.&lt;/p&gt;&amp;mdash; Daniel Greenfeld (@pydanny) &lt;a href="https://twitter.com/pydanny/status/275680738773463040" data-datetime="2012-12-03T19:19:44+00:00"&gt;December 3, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src="http://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;div class="section" id="why-did-this-tweet-resonate-with-so-many-people"&gt;
&lt;h2&gt;Why did this tweet resonate with so many people?&lt;/h2&gt;
&lt;p&gt;What I said in that tweet was not new - dozens if not hundreds of others have tweeted similar thoughts before and gotten many retweets. Heck, it's been written about in blogs and articles for years, either as a huge rant or often as an effort to politely educate others on how to set up a developer/operations/creative shop.&lt;/p&gt;
&lt;p&gt;I think this is because developers/engineers/creatives (and good managers) know that even a tiny distraction to someone &amp;quot;in the zone&amp;quot; takes more than just the 3-5 minutes it takes for you to finish a question and get an answer. Plus, because you are trying to remember the pieces in your head, you won't be able to give this issue your full attention. Which causes a whole other set of issues.&lt;/p&gt;
&lt;p&gt;We know this. Good managers know this. Good companies live off of it.&lt;/p&gt;
&lt;p&gt;And yet this remains a huge problem for many of us because the distractions keep happening. Maybe it's because your manager doesn't understand this issue, or you have a team mate who can switch in-and-out of the zone with impunity. Or because you foolishly leave the chat/IRC/phone on and you get pinged.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-do-we-fix-it"&gt;
&lt;h2&gt;How do we fix it?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;We can't.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I know this sounds depressing, but I'm being realistic. Here's some reasons that apply:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Unless you are fortunate enough to be working on a solo effort, you are working with other developers/engineers/creatives. And if they can't ask you questions or inform you about critical stuff then you or they can waste hours.&lt;/li&gt;
&lt;li&gt;Meetings, short or long, online or in person, are a necessary part of any operation. If not with your boss or underlings, then with clients or users.&lt;/li&gt;
&lt;li&gt;Your boss/co-workers/underlings/kids/pets/parents don't get it that you can't be interrupted.&lt;/li&gt;
&lt;li&gt;As a freelancer, you can't be inaccessible to existing or potential clients.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="no-really-how-do-we-fix-it"&gt;
&lt;h2&gt;No really, how do we fix it?&lt;/h2&gt;
&lt;p&gt;Doesn't matter how frequently you ask the the question (or rant about it), I don't believe this problem can be really solved. However, here are some possible mitigations:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Maker's Day&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My friend, &lt;a class="reference external" href="http://craigkerstiens.com/2011/11/07/how-heroku-works-maker-day/"&gt;Craig Kerstiens&lt;/a&gt; describes how &lt;a class="reference external" href="http://heroku.com"&gt;Heroku&lt;/a&gt; gives engineers a full day each week (Thursday) to focus on getting stuff done. No meetings, no standup, just 100% uninterrupted quiet time to focus on making stuff.&lt;/p&gt;
&lt;p&gt;Suggest this at your company and see how it goes!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Blocks of Time&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As of 2010, &lt;a class="reference external" href="http://eldarion.com"&gt;Eldarion&lt;/a&gt; broke up their work day into at least two sizable chunks of uninterrupted activity. Between the chunks you communicated with co-workers. The advantage of this approach is if you went down the wrong path or someone had a critical question, the period between chunks addressed this issue.&lt;/p&gt;
&lt;p&gt;In theory this is how a lot of places work (lunch being the break). The reality is that the distractions often still pile in. For Eldarion it worked because everyone was remote.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. New Desk Location&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If working at an office, asked to be moved to a place with less foot traffic. The downside to this is you can end up in noisy, cold, dark places.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. New Job&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Switch to a new job that promises less distractions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="maybe-i-m-wrong"&gt;
&lt;h2&gt;Maybe I'm wrong&lt;/h2&gt;
&lt;p&gt;I'm more than happy to be proven wrong.&lt;/p&gt;
&lt;p&gt;Maybe there is a way to get 4-6 hours a day of uninterrupted maker's time every work day.&lt;/p&gt;
&lt;p&gt;If you've got any ideas, let me know!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="rant"></category><category term="blog"></category></entry><entry><title>Stay with the Django CBV defaults!</title><link href="https://www.pydanny.com/stay-with-the-django-cbv-defaults.html" rel="alternate"></link><published>2012-11-27T16:00:00-08:00</published><updated>2012-11-27T16:00:00-08:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:https://www.pydanny.com,2012-11-27:stay-with-the-django-cbv-defaults.html</id><summary type="html">&lt;p&gt;One virtue of Django Class Based Views (CBVs) is that they come with pretty good default settings. The virtue of this is you can really pare your code down in size and complexity.&lt;/p&gt;
&lt;p&gt;For example, here is an implementation of CBVs based on a straight-forward Django model , &lt;tt class="docutils literal"&gt;stuffage.models.Stuff&lt;/tt&gt;, that has a &lt;tt class="docutils literal"&gt;get_absolute_url&lt;/tt&gt; method:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;stuffage/views.py&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;generic&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;stuffage.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Stuff&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StuffDetailView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DetailView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Stuff&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StuffListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Stuff&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StuffCreateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Stuff&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StuffUpdateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UpdateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Stuff&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;stuffage/urls.py&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls.defaults&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;stuffage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^create/$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StuffCreateView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stuff_create&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^update/(?P&amp;lt;pk&amp;gt;\d+)/$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StuffUpdateView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stuff_update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^(?P&amp;lt;pk&amp;gt;\d+)/$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StuffDetailView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stuff_detail&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StuffListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stuff_list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These four CBVs will default to the following three templates without any action on my part:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
stuffage/stuff_detail.html (StuffDetailView)
stuffage/stuff_form.html (StuffCreateView, StuffUpdateView)
stuffage/stuff_list.html (StuffListView)
&lt;/pre&gt;
&lt;p&gt;So easy I use a simple script to render all this code!&lt;/p&gt;
&lt;div class="section" id="what-about-doing-this-all-in-the-urls-py"&gt;
&lt;h2&gt;What about doing this all in the urls.py?&lt;/h2&gt;
&lt;p&gt;Yes, I could do this all in the &lt;cite&gt;urls.py&lt;/cite&gt;, but real Django code involves doing some logic in views, no matter how skinny you try to make said views. While I'm a huge proponent of logic in fat models, invariably I'm adding to the view context, or doing something else that requires tweaking of CBV settings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;One trait of developers is we like to &lt;strong&gt;tinker&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, I keep seeing developers tinkering on the settings for Django CBVs without any reason besides tinkeringWhich means you get things like:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;unfortunately tinkered stuffage/views.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 1. Using template_name means extra code and extra developer lookup time.&lt;/span&gt;
&lt;span class="c1"&gt;# 2. Changing the context_object_name means extra code  and extra developer&lt;/span&gt;
&lt;span class="c1"&gt;#       lookup time.&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StuffDetailView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DetailView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Stuff&lt;/span&gt;
    &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stuffage/stuffs.html&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;context_object_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;stuff&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;unfortunately tinkered stuffage/urls.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 1. Logic into your URLConf should be kept to a minimum&lt;/span&gt;
&lt;span class="c1"&gt;# 2. Unless you are using the same view more than once, specifying the&lt;/span&gt;
&lt;span class="c1"&gt;#       template_name here is a waste of code. And makes it harder to&lt;/span&gt;
&lt;span class="c1"&gt;#       understand the view.&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StuffListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stuffage/stuffs.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stuff_list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="c1"&gt;# No matter how fat your models get, you always end up extending all views,&lt;/span&gt;
&lt;span class="c1"&gt;#   so this will have to be moved into the formal views.py at some point. So&lt;/span&gt;
&lt;span class="c1"&gt;#   why not start with it in the views.py in the first place.&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Stuff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stuffage/stuffs.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stuff_list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don't forget you can also tinker/tweak formats and slug/pk identifier defaults, and a ton of other things that are part of Django CBVs. While this gives you great power, if misused that power can cause grief in terms of code obfuscation and the need for additional testing.&lt;/p&gt;
&lt;p&gt;My opinion is that these defaults were meant as a standard for the CBV to operate, upon which developers familiar with the Django CBV API could extend and expand their code for minimal effort. Yes, you can tweak them to match your preferred patterns, but that's extra work. Work you shouldn't be doing if you can avoid it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-advice"&gt;
&lt;h2&gt;My Advice&lt;/h2&gt;
&lt;p&gt;Stick with the defaults and only modify behavior that actually needs to be modified. For example, if you want to show multiple versions of a ListView you might do something like:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;stuffage/urls.py with a pydanny approved use of template_name&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StuffListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stuff_list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="c1"&gt;# Same view but with a template designed to show larger list items.&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^large/$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StuffListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stuffage/stuff_list_large.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stuff_list_large&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This is the pattern I follow when I build projects. I stick to the framework standard as much as possible. Since many systems rely on convention over configuration, this makes it easier and faster to develop projects, be it Django, Twisted, or some other tool.&lt;/p&gt;
&lt;p&gt;It's the work you can see in my &lt;a class="reference external" href="http://petcheatsheets.com"&gt;recent&lt;/a&gt; &lt;a class="reference external" href="http://movehero.io"&gt;public&lt;/a&gt; &lt;a class="reference external" href="http://lacurrents.com"&gt;projects&lt;/a&gt;, and what I want to port to long existing sites like &lt;a class="reference external" href="http://djangopackages.com"&gt;Django Packages&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="rant"></category><category term="django"></category><category term="python"></category><category term="howto"></category><category term="class-based-views"></category></entry><entry><title>Thoughts on ranting</title><link href="https://www.pydanny.com/thoughts-on-ranting.html" rel="alternate"></link><published>2012-11-26T16:00:00-08:00</published><updated>2012-11-26T16:00:00-08:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:https://www.pydanny.com,2012-11-26:thoughts-on-ranting.html</id><summary type="html">&lt;p&gt;I'll admit it, I love a good rant. I respect those who can give rants well. I would list the ones I really like, but I'm not sure I want to deal with the arguments that would follow. ;-)&lt;/p&gt;
&lt;p&gt;Of course, as much as I like to read or listen to them, I also like to give them. As of 11/26/2012 there are 2 on this &lt;a class="reference external" href="https://pydanny.com/tag/rant.html"&gt;blog&lt;/a&gt; and 26 on my &lt;a class="reference external" href="https://pydanny.blogspot.com/search/label/rant"&gt;old blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, I have a problem in giving rants. It ties with this unfortunate trait I possess where if I let myself get angry I say things that destroy relationships. No, I'm not giving examples, but there you are.&lt;/p&gt;
&lt;p&gt;So when I do rant, I try to never do so in anger. Especially when it's the written word. Instead, I try to do so under one of the following conditions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I need to be a whimsical mood.&lt;/li&gt;
&lt;li&gt;OR I need to be willing to submit a solution.&lt;/li&gt;
&lt;li&gt;OR I need to be willing to accept a solution, even if it means work.&lt;/li&gt;
&lt;li&gt;OR I need to be willing to create a solution.&lt;/li&gt;
&lt;li&gt;OR the object of the rant must be an easy target to flame.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="blog"></category><category term="rant"></category><category term="family"></category><category term="friends"></category></entry><entry><title>The sorry state of Python OAuth providers</title><link href="https://www.pydanny.com/the-sorry-state-of-python-oauth-providers.html" rel="alternate"></link><published>2012-03-05T07:30:00-08:00</published><updated>2012-03-05T07:30:00-08:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:https://www.pydanny.com,2012-03-05:the-sorry-state-of-python-oauth-providers.html</id><summary type="html">&lt;p&gt;This is one of those challenging posts to write. The people whose projects I'm going to describe have put in a lot of dedicated, hard work to overcome a challenging subject. Writing an OAuth consumer is a hard problem and writing an OAuth provider is an even harder problem. The efforts put in by the authors of these projects has been nothing short of incredible. The problem, however, is that the existing projects are not usable as-is, and need the support of the community in order to improve.&lt;/p&gt;
&lt;p&gt;The terrible thing is that this is a solved problem within our community. Python based projects are successfully implementing OAuth providers, and often using internally hacked versions of the efforts I'm about to describe. However, they aren't giving this back to the community. It might be that they want to protect their competitive edge, but I'm going to be nice and say that it's because their too busy to find time to send pull requests back.&lt;/p&gt;
&lt;p&gt;In any case, let me present our use case. For &lt;a class="reference external" href="http://consumernotebook.com"&gt;Consumer Notebook&lt;/a&gt; we want an &lt;a class="reference external" href="http://api.consumernotebook.com"&gt;API&lt;/a&gt;. We want to be able to track usernames, passwords, and the application using our &lt;a class="reference external" href="http://api.consumernotebook.com"&gt;API&lt;/a&gt; - which is the OAuth use case. Much as BasicAuth or DigestAuth is the easier way to go in terms of implementation, OAuth was designed for our use case: allowing third-party developers to build apps using our API without having to store credentials. In fact, it's a critical security issue: Twitter dealt with malicious &amp;quot;Twitter apps&amp;quot; stealing usernames and passwords before they switched to OAuth. As an API provider, being an OAuth provider might be more challenging, but it's the responsible thing to do.&lt;/p&gt;
&lt;div class="section" id="existing-oauth-providers"&gt;
&lt;h2&gt;Existing OAuth Providers&lt;/h2&gt;
&lt;p&gt;Time to get into the meat of the issue. Let's look at the current implementations of OAuth providing within the Python community. Again, I wish I didn't have to be negative, but I'm up against the wall:&lt;/p&gt;
&lt;div class="section" id="oauth2app-django"&gt;
&lt;h3&gt;OAuth2app (Django)&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/hiidef/OAuth2app"&gt;https://github.com/hiidef/OAuth2app&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OAuth version: 2.0&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Strange URL construction that might be a security hole.&lt;/li&gt;
&lt;li&gt;Bitwise operators in the logic making it harder to debug. Security is hard. Don't complicate your security code because your mistakes will cost.&lt;/li&gt;
&lt;li&gt;Uncommented code. Security is hard. Comment your code.&lt;/li&gt;
&lt;li&gt;Documentation outdated and insufficient.&lt;/li&gt;
&lt;li&gt;Doesn't work without serious hacking and adding of undocumented parameters. Which means I have to worry if I'm breaking anything.&lt;/li&gt;
&lt;li&gt;We managed to get it working with GET requests.  Then we realized that we were using GET requests, which seems like a bad idea.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="django-piston-django"&gt;
&lt;h3&gt;django-piston (Django)&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://bitbucket.org/jespern/django-piston"&gt;https://bitbucket.org/jespern/django-piston&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OAuth version: 1.0&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Stalled project.&lt;/li&gt;
&lt;li&gt;Documentation insufficient.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="django-oauth-plus-django"&gt;
&lt;h3&gt;django-oauth-plus (Django)&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://code.larlet.fr/django-oauth-plus"&gt;http://code.larlet.fr/django-oauth-plus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OAuth version: 1.0a&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tutorial doesn't work.&lt;/li&gt;
&lt;li&gt;Documentation insufficient.&lt;/li&gt;
&lt;li&gt;Doesn't work without serious hacking. Which means I have to worry if I'm breaking anything.&lt;/li&gt;
&lt;li&gt;We could not get it to work.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="lastuser-flask"&gt;
&lt;h3&gt;lastuser (Flask)&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/hasgeek/lastuser"&gt;https://github.com/hasgeek/lastuser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OAuth version: 2.0&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No documentation&lt;/li&gt;
&lt;li&gt;No tests to serve as documentation&lt;/li&gt;
&lt;li&gt;Lack of documentation means I'm not sure if it is actually a OAuth provider.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="python-oauth2-python"&gt;
&lt;h3&gt;python-oauth2 (Python)&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/dgouldin/python-OAuth2"&gt;https://github.com/dgouldin/python-OAuth2&lt;/a&gt; (best example)&lt;/p&gt;
&lt;p&gt;OAuth version: 1.0&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Called 'OAuth2' but only works with OAuth 1? Really? &lt;strong&gt;WTF?&lt;/strong&gt; This needs to fixed.&lt;/li&gt;
&lt;li&gt;Documentation insufficient.&lt;/li&gt;
&lt;li&gt;Provides only a skeleton of a provider. Not a turnkey solution.&lt;/li&gt;
&lt;li&gt;Doesn't work as a provider without serious hacking. Which means I have to worry if I'm breaking anything.&lt;/li&gt;
&lt;li&gt;Many, many forks of the project, with various blog posts advising people to use various particular forks rather than the main one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-about-a-solution"&gt;
&lt;h2&gt;How about a solution?&lt;/h2&gt;
&lt;p&gt;Alright, I've ranted and laid out out a bunch of bullets identifying a problem. Time to try and fix the problem.&lt;/p&gt;
&lt;p&gt;For starters, a production-usable OAuth provider should meet certain standards:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Near turnkey solution&lt;/li&gt;
&lt;li&gt;Working code (duplicates above bullet but I'm making a point)&lt;/li&gt;
&lt;li&gt;Working tutorials&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Commented code&lt;/li&gt;
&lt;li&gt;Linted code&lt;/li&gt;
&lt;li&gt;Test coverage &amp;gt; 80%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is my specification. If your project for any Python framework matches it, I'll list it on a forthcoming website that also covers Python based OAuth consumers.&lt;/p&gt;
&lt;p&gt;For what it's worth, Idan Gazit has been working on something to help address the problem, specifically &lt;a class="reference external" href="https://github.com/idan/oauthlib"&gt;https://github.com/idan/oauthlib&lt;/a&gt;. It also is intended to cover the Python OAuth consumption issue I didn't cover in this article.  It and related efforts need a lot of work, so...&lt;/p&gt;
&lt;p&gt;The PyCon US 2012 sprints start on March 12. I think as a community, we Pythonistas should band together and make things right. I think we'll have the brainpower and enough eyes on the problem to make serious headway on the issue, either by fixing existing solutions or creating new ones. Right now I've got interest from people to join in and help, including Idan Gazit, Audrey Roy, George Hickman, and others.&lt;/p&gt;
&lt;p&gt;We're willing to put in the time to make OAuth in Python better, how about you?&lt;/p&gt;
&lt;p&gt;Join us at the PyCon US sprints either in person or on-line. &lt;a class="reference external" href="https://us.pycon.org/2012/community/sprints/projects/"&gt;Details of the sprint are near the bottom of this PyCon Sprint page&lt;/a&gt;.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://oauth.net/"&gt;&lt;img alt="http://farm8.staticflickr.com/7201/6803475636_f34fb400eb_m.jpg" class="align-center" id="oauth-logo" src="http://farm8.staticflickr.com/7201/6803475636_f34fb400eb_m.jpg" /&gt;&lt;/a&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="updates"&gt;
&lt;h3&gt;Updates&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;03/05/2012 - Removed Velruse from the list of providers as it's lead, Michael Merickel, clarified that it is not a provider.&lt;/li&gt;
&lt;li&gt;03/06/2012 - Added a link to the PyCon OAuth sprints.&lt;/li&gt;
&lt;li&gt;6/24/2013 - This article has been translated by Anja Skrba to Serbo-Croatian: &lt;a class="reference external" href="http://science.webhostinggeeks.com/lose-stanje-python"&gt;http://science.webhostinggeeks.com/lose-stanje-python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;07/07/2013 - Please consider &lt;a class="reference external" href="https://github.com/evonove/django-oauth-toolkit"&gt;https://github.com/evonove/django-oauth-toolkit&lt;/a&gt; for use as a Django-powered OAuth provider. The team behind it is doing it right!&lt;/li&gt;
&lt;li&gt;01/16/2014 - Please consider &lt;a class="reference external" href="https://github.com/lepture/flask-oauthlib"&gt;https://github.com/lepture/flask-oauthlib&lt;/a&gt; for use as a Flask-powered OAuth provider.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;a class="reference external" href="http://news.ycombinator.com/item?id=3666853"&gt;Discuss this post on Hacker News&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="OAuth"></category><category term="api"></category><category term="Consumer-Notebook"></category><category term="rant"></category></entry></feed>