<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pydanny</title><link href="https://www.pydanny.com/" rel="alternate"></link><link href="https://www.pydanny.com/feeds/pyramid.atom.xml" rel="self"></link><id>https://www.pydanny.com/</id><updated>2014-07-01T12:00:00-07:00</updated><entry><title>cached-property: Don't copy/paste code</title><link href="https://www.pydanny.com/cached-property.html" rel="alternate"></link><published>2014-07-01T12:00:00-07:00</published><updated>2014-07-01T12:00:00-07:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:https://www.pydanny.com,2014-07-01:cached-property.html</id><summary type="html">&lt;p&gt;In Python, the &lt;tt class="docutils literal"&gt;&amp;#64;cached_property&lt;/tt&gt; decorator is a really nice piece of code. What it does is it caches the result of a &lt;a class="reference external" href="https://docs.python.org/2/library/functions.html#property"&gt;property&lt;/a&gt; call. The cached result will persist as long as the instance does, so if the instance is passed around and the function subsequently invoked, the cached result will be returned.&lt;/p&gt;
&lt;p&gt;If that doesn't make much sense, below is a snippet of code that shows the code and demonstrates it in action. As always, I'm using &lt;a class="reference external" href="https://pydanny.com/pytest-no-boilerplate-testing.html"&gt;pytest&lt;/a&gt; to validate my code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;cached_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; A property that is only computed once per instance and then replaces&lt;/span&gt;
&lt;span class="sd"&gt;        itself with an ordinary attribute. Deleting the attribute resets the&lt;/span&gt;
&lt;span class="sd"&gt;        property.&lt;/span&gt;

&lt;span class="sd"&gt;        Source: https://github.com/bottlepy/bottle/commit/fa7733e075da0d790d809aa3d2f53071897e6f76&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SlowClass1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@cached_property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;very_slow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Represents a performance heavy property.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Wait a WHOLE second!&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I am slooooow&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_slow_class1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Instantiate the slow class&lt;/span&gt;
    &lt;span class="n"&gt;slow_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SlowClass1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Start the clock!&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Call the property. This time it&amp;#39;s really slow...&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;slow_class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;very_slow&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I am slooooow&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# Check that it took at least a second to run&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;milliseconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Call the property a second time. This time it runs fast.&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;slow_class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;very_slow&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I am slooooow&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# Second time running, should take a TINY amount of time.&lt;/span&gt;
    &lt;span class="c1"&gt;# Should take just a microsecond, but we&amp;#39;ll play a test for and test&lt;/span&gt;
    &lt;span class="c1"&gt;#   for a maximim of at least 100 milliseconds.&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;milliseconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is great for encapsulating slow database queries, fetching results from third-party REST APIs, performing slow algorithms, and anything else where you would want to catch the results. Pretty neat, yeah!&lt;/p&gt;
&lt;p&gt;While originally implemented for web frameworks such as Django, Flask, Pyramid, and Bottle, I've copy/pasted the &lt;tt class="docutils literal"&gt;cached_property&lt;/tt&gt; property from non-web project to project as a quick way to give my code a little boost. I got tired of doing this, and on May 17th, 2014 I decided to release it as a package called &lt;cite&gt;cached-property&lt;/cite&gt; on &lt;a class="reference external" href="https://pypi.python.org/pypi/cached-property"&gt;PyPI&lt;/a&gt;. Using it is easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# assuming you&amp;#39;ve already done &amp;quot;pip install cached-property&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cached_property&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cached_property&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SlowClass2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@cached_property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;very_slow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Represents a performance heavy property.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Wait a WHOLE second!&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I am slooooow&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_slow_class2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Instantiate the slow class&lt;/span&gt;
    &lt;span class="n"&gt;slow_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SlowClass2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Start the clock!&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Call the property. This time it&amp;#39;s really slow...&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;slow_class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;very_slow&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I am slooooow&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# Check that it took at least a second to run&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;milliseconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Call the property a second time. This time it runs fast.&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;slow_class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;very_slow&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I am slooooow&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# Second time running, should take a TINY amount of time.&lt;/span&gt;
    &lt;span class="c1"&gt;# Should take just a microsecond, but we&amp;#39;ll play a test for and test&lt;/span&gt;
    &lt;span class="c1"&gt;#   for a maximim of at least 100 milliseconds.&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;milliseconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hooray! No more copy/pasting for me! I was very pleased with myself.&lt;/p&gt;
&lt;p&gt;Little did I know how fortunate I was for having released this package.&lt;/p&gt;
&lt;div class="section" id="don-t-copy-paste-code"&gt;
&lt;h2&gt;Don't Copy/Paste Code&lt;/h2&gt;
&lt;p&gt;The very next day after I released the &lt;cite&gt;cached-property&lt;/cite&gt; package, &lt;a class="reference external" href="https://github.com/Tinche"&gt;Tin Tvrtković&lt;/a&gt; opened an issue asking for &lt;a class="reference external" href="https://github.com/pydanny/cached-property/issues/6"&gt;better multithreaded support&lt;/a&gt;.  To my shock and embarressment, my copy/pasted code could have been disastrous if brought into the wrong project. I had blindly been assuming that the code I hadn't bothered to try and understand worked under any situation, when in reality it had been designed for working within the context of a web framework.&lt;/p&gt;
&lt;p&gt;Ultimately, Tin &lt;a class="reference external" href="https://github.com/pydanny/cached-property/pull/9"&gt;submitted a pull request&lt;/a&gt;, and now the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cached-property&lt;/span&gt;&lt;/tt&gt; package also includes a &lt;tt class="docutils literal"&gt;&amp;#64;threaded_cached_property&lt;/tt&gt; decorator. Thank you Tin!&lt;/p&gt;
&lt;p&gt;However, the lessons of the experience had been burned into my brain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lessons-learned"&gt;
&lt;h2&gt;Lessons Learned&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Don't copy/paste code blindly from project to project.&lt;/li&gt;
&lt;li&gt;If you are repeatedly moving code from project to project, take the time to understand what the code is actually doing.&lt;/li&gt;
&lt;li&gt;Instead of copy/pasting code from project to project, make a package and ask for input from others. If making a package feels like too much work, &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter-pypackage"&gt;cookiecutter-pypackage&lt;/a&gt; makes creating new packages really easy.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="going-forward"&gt;
&lt;h2&gt;Going forward&lt;/h2&gt;
&lt;p&gt;One exciting development has been the &lt;a class="reference external" href="https://github.com/pydanny/cached-property/issues/2"&gt;discussion to include a cached_property decorator in core Python&lt;/a&gt;. Even if my contribution to the effort has been merely the encapsulation of the code, it's nice to know I may have some small part in the development of the language.&lt;/p&gt;
&lt;img alt="https://pydanny.com/static/directions_med.png" class="align-center" id="whither-shall-i-go" src="https://pydanny.com/static/directions_med.png" /&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="flask"></category><category term="bottle"></category><category term="ppoftw"></category><category term="pypi"></category><category term="pyramid"></category></entry><entry><title>Made Up Statistics</title><link href="https://www.pydanny.com/made-up-statistics.html" rel="alternate"></link><published>2013-07-26T16:00:00-07:00</published><updated>2013-07-26T16:00:00-07:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:https://www.pydanny.com,2013-07-26:made-up-statistics.html</id><summary type="html">&lt;p&gt;Years ago my good friend &lt;a class="reference external" href="https://twitter.com/maraujop"&gt;Miguel Araujo&lt;/a&gt; and I presented on &lt;a class="reference external" href="http://speakerdeck.com/u/pydanny/p/advanced-django-forms-usage"&gt;Advanced Django Form Usage&lt;/a&gt;. &lt;a class="reference external" href="http://www.slideshare.net/pydanny/advanced-django-forms-usage/52"&gt;Slide 18&lt;/a&gt; of that talk mentioned some made up statistics. Here they are for reference:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;91% of Django projects use ModelForms.&lt;/li&gt;
&lt;li&gt;80% ModelForms require trivial logic.&lt;/li&gt;
&lt;li&gt;20% ModelForms require complex logic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Chapter 10 of &lt;a class="reference external" href="http://django.2scoops.org/"&gt;Two Scoops of Django&lt;/a&gt; I expanded on those made up statistics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;95% of Django projects should use ModelForms.&lt;/li&gt;
&lt;li&gt;91% of all Django projects use ModelForms.&lt;/li&gt;
&lt;li&gt;80% of ModelForms require trivial logic.&lt;/li&gt;
&lt;li&gt;20% of ModelForms require complicated logic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Important Disclaimer&lt;/strong&gt;: These numbers were cooked out of thin air by yours truly. I determined them with zero research, they carry absolutely no scientific weight, and shouldn't be used in any serious argument. They are wholly my opinion, which is good or bad depending on your point of view and your own opinion of my opinions.&lt;/p&gt;
&lt;p&gt;With that out of the way, here's a bar graph created from the fictional data I presented with Miguel back in 2011:&lt;/p&gt;
&lt;img alt="static/made-up-statistics.png" class="img-polaroid align-center" id="id1" src="static/made-up-statistics.png" /&gt;
&lt;p&gt;You'll notice that my bar titles could be stronger. I actually did that on purpose in case anyone tries to use that chart in real life. In any case, if you thought that was interesting, then read on. I have many more made-up statistics. For example, here are more numbers I've cooked up:&lt;/p&gt;
&lt;div class="section" id="pydanny-made-up-devops-statistics"&gt;
&lt;h2&gt;Pydanny Made Up DevOps Statistics&lt;/h2&gt;
&lt;p&gt;Thanks to the cloud and a blizzard of hip, new tools, DevOps is the new hotness. I know because every other Python meetup features someone speaking on it - just like every other Ruby, Perl, and PHP meetup. Anyway... numbers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;24.3% of &lt;a class="reference external" href="http://python.org/"&gt;Python&lt;/a&gt; developers doing DevOps think they could have launched a PaaS (aka Heroku clone) before it got crowded.&lt;/li&gt;
&lt;li&gt;46.3% of Python developers doing DevOps spend all their time writing Chef/Puppet scripts and yet still claim to be Python developers.&lt;/li&gt;
&lt;li&gt;14% of Python developers are worried about so much of the backend being done in Ruby, but don't quite trust Salt or Ansible enough to use them.&lt;/li&gt;
&lt;li&gt;54% of Python developers are just happy that there are many options now and don't care about the internal machinery that much.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This time, because I'm worried about the data being taken seriously, I've titled the bar chart in such a way that no one will reference it in anything important:&lt;/p&gt;
&lt;img alt="static/devops.png" class="img-polaroid align-center" id="devops" src="static/devops.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="pydanny-made-up-python-enviroment-statistics"&gt;
&lt;h2&gt;Pydanny Made Up Python Enviroment Statistics&lt;/h2&gt;
&lt;p&gt;Following the obvious logic flow (to me anyway) of DevOps to something else, let's go into Python environments, also known as the &lt;a class="reference external" href="http://pypi.python.org/pypi/virtualenv"&gt;VirtualEnv&lt;/a&gt; vs &lt;a class="reference external" href="http://pypi.python.org/pypi/zc.buildout"&gt;Buildout&lt;/a&gt; debate, which adds up to an even 100% (making it good pie chart material):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;77% of Python Developers prefer VirtualEnv.&lt;/li&gt;
&lt;li&gt;13% of Python Developers prefer Buildout. Many of them don't say this out loud.&lt;/li&gt;
&lt;li&gt;7% of Python developers rolled their own solution and &lt;strong&gt;wish they could switch over.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;3% of Python developers rolled their own solution and are fiendishly delighted with how they have guaranteed their own job security forever. I know who some of you are and I can say with some confidence that when the Zombie apocalypse happens, no one is going to invite you into their fortified compounds. &lt;strong&gt;We hate you that much.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="static/environment.png" class="img-polaroid align-center" id="environment" src="static/environment.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="pydanny-made-up-template-debate-statistics"&gt;
&lt;h2&gt;Pydanny Made Up Template Debate Statistics&lt;/h2&gt;
&lt;p&gt;The made up statistics in this post frequently touch on contentious topics. So let me add another controversial topic, this time the never ending template debate in Python:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;70% of python developers prefer &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.5/ref/templates/"&gt;non-XML&lt;/a&gt; &lt;a class="reference external" href="http://jinja.pocoo.org/docs/"&gt;templates&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;25% of python developers prefer &lt;a class="reference external" href="http://www.makotemplates.org/"&gt;XML&lt;/a&gt; templates.&lt;/li&gt;
&lt;li&gt;5% of python developers wonder why we don't just use the &lt;a class="reference external" href="http://docs.python.org/library/string.html#formatstrings"&gt;str.format()&lt;/a&gt; method and be done with it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The display for this data is a lovely pie chart as seen below. In order to make it appear more useful, I made it a 3-D pie chart:&lt;/p&gt;
&lt;img alt="static/templates.png" class="img-polaroid align-center" id="templates-considerations" src="static/templates.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="pydanny-made-up-python-web-optimization-statistics"&gt;
&lt;h2&gt;Pydanny Made Up Python Web Optimization Statistics&lt;/h2&gt;
&lt;p&gt;I sometimes get asked how to best optimize a Django site. My answer is 'optimize your queries and use caching'. On the other hand, there are those who disagree with me and start switching out Django internals before doing anything silly like looking at I/O.  My bet is this same thing happens with other frameworks such as Flask and Pyramid.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;20% developers argue switching template languages.&lt;/li&gt;
&lt;li&gt;80% developers argue using caching and load balancing.&lt;/li&gt;
&lt;li&gt;100% Django/Pyramid/Flask/etc core developers argue using caching and load balancing.&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="static/optimization.png" class="img-polaroid align-center" id="optimization" src="static/optimization.png" /&gt;
&lt;p&gt;Of all the made up statistics in this blog post, I suspect this is the one closest to the truth of things.&lt;/p&gt;
&lt;span id="debate-statistics"&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class="section" id="pydanny-made-up-debate-statistics"&gt;
&lt;h2&gt;&lt;a class="reference external" href="#debate-statistics"&gt;Pydanny Made Up Debate Statistics&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Alright, let's conclude this article with some statistics I cooked up in regards to various Python related topics.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;95% of developers trying to create reusable Python packages have &lt;strong&gt;no freaking idea&lt;/strong&gt; as to whether or not we should be using setuptools, distribute, or distribute2 and wish there was a &lt;strong&gt;clear explanation on the front page&lt;/strong&gt; of PyPI as to what we should be using and how. Something like a link to the &lt;a class="reference external" href="https://python-packaging-user-guide.readthedocs.org/en/latest/index.html"&gt;Python Packaging User Guide&lt;/a&gt; might be nice!&lt;/li&gt;
&lt;li&gt;99% of us get frustrated with trying to reconcile the pronunciations of PyPI with PyPy.&lt;/li&gt;
&lt;li&gt;97.2% of our family and friends have no idea what Two Scoops of Django is about.&lt;/li&gt;
&lt;li&gt;62% of Python developers are wondering if Tulip will make their projects more web scale.&lt;/li&gt;
&lt;li&gt;49% of Twisted developers wish that Python had accepted their standard instead of PEP-8.&lt;/li&gt;
&lt;li&gt;42% of Python developers think Flask/Pyramid have awesome names that don't get mispronounced the same way Django does.&lt;/li&gt;
&lt;li&gt;28% of Python developers wish they could find a way to get some SciPy into their projects.&lt;/li&gt;
&lt;li&gt;23.6% of us get web.py and web2py confused with each other.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No chart? Getting this one to look meaningful was turning into a herculean effort. I invite others to render this data into something that look attractive and doesn't lose meaning. Come up with something impressive and I'll put it into a follow-up blog post.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is a reprint and update of an earlier &lt;a class="reference external" href="https://pydanny.blogspot.com/2011/12/made-up-statistics.html"&gt;article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Added link to the &lt;a class="reference external" href="https://python-packaging-user-guide.readthedocs.org/en/latest/index.html"&gt;Python Packaging User Guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="rant"></category><category term="flask"></category><category term="pyramid"></category><category term="pypi"></category><category term="pypy"></category></entry></feed>