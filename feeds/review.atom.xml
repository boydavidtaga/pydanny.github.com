<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pydanny</title><link href="https://pydanny.com/" rel="alternate"></link><link href="https://pydanny.com/feeds/review.atom.xml" rel="self"></link><id>https://pydanny.com/</id><updated>2012-05-10T08:00:00-07:00</updated><entry><title>Choosing an API framework for Django</title><link href="https://pydanny.com/choosing-an-api-framework-for-django.html" rel="alternate"></link><updated>2012-05-10T08:00:00-07:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:https://pydanny.com,2012-05-10:choosing-an-api-framework-for-django.html</id><summary type="html">&lt;p&gt;First off, out of the box, &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; lets you construct API responses with a little work. All you need to do is something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Copied from https://docs.djangoproject.com/en/1.4/topics/class-based-views/#more-than-just-html&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;simplejson&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JSONResponseMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Returns a JSON response containing &amp;#39;context&amp;#39; as payload&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_json_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert_context_to_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_json_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;httpresponse_kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Construct an `HttpResponse` object.&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;httpresponse_kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert_context_to_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Convert the context dictionary into a JSON object&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# Note: This is *EXTREMELY* naive; in reality, you&amp;#39;ll need&lt;/span&gt;
        &lt;span class="c1"&gt;# to do much more complex handling to ensure that arbitrary&lt;/span&gt;
        &lt;span class="c1"&gt;# objects -- such as Django model instances or querysets&lt;/span&gt;
        &lt;span class="c1"&gt;# -- can be serialized as JSON.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you get that &lt;cite&gt;mixin&lt;/cite&gt;, use it in your views like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# modified from djangoproject.com sample code&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;simplejson&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JSONDetailView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSONResponseMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyCustomUserView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert_context_to_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;objects&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;is_active&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works pretty well in a number of simple cases, but doing things like pagination, posting of data, metadata, API discovery, and other important things ends up being a bit more work. This is where the resource oriented API frameworks come in.&lt;/p&gt;
&lt;div class="section" id="what-makes-a-decent-api-framework"&gt;
&lt;h2&gt;What makes a decent API Framework?&lt;/h2&gt;
&lt;p&gt;These features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pagination&lt;/li&gt;
&lt;li&gt;posting of data with validation&lt;/li&gt;
&lt;li&gt;Publishing of metadata along with querysets&lt;/li&gt;
&lt;li&gt;API discovery&lt;/li&gt;
&lt;li&gt;proper HTTP response handling&lt;/li&gt;
&lt;li&gt;caching&lt;/li&gt;
&lt;li&gt;serialization&lt;/li&gt;
&lt;li&gt;throttling&lt;/li&gt;
&lt;li&gt;permissions&lt;/li&gt;
&lt;li&gt;authentication&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Proper API frameworks also need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Really good test coverage of their code&lt;/li&gt;
&lt;li&gt;Decent performance&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;An active community to advance and support the framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you take these factors, at this time there are only two API frameworks worth using, &lt;a class="reference external" href="http://django-tastypie.readthedocs.org/"&gt;django-tastypie&lt;/a&gt; and &lt;a class="reference external" href="http://django-rest-framework.org/"&gt;django-rest-framework&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="which-one-is-better-django-tastypie-or-django-rest-framework"&gt;
&lt;h2&gt;Which one is better? django-tastypie or django-rest-framework?&lt;/h2&gt;
&lt;p&gt;I say they are equal.&lt;/p&gt;
&lt;p&gt;You simply can't go wrong with either one. The authors and communities behind both of them are active, the code is solid and tested. And here are my specific thoughts about both of them:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;django-tastypie&lt;/h2&gt;
&lt;p&gt;Using django-tastypie is like playing with pure Python while using the Django ORM. I find it very comfortable. Seems really fast too. The documentation is incredible, and I rarely have any problems figuring anything out. It also supports OAuth 1.0a out of the box, which is mighty awesome these days.&lt;/p&gt;
&lt;p&gt;In fact, I wrote a custom OAuth2 handler for django-tastypie for &lt;a class="reference external" href="http://consumer.io"&gt;consumer.io&lt;/a&gt; that I'm working to extract for publication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;django-rest-framework&lt;/h2&gt;
&lt;p&gt;As it's based off Django 1.3 style Class Based Views (CBVs), it has a very familiar pattern. Actually, because of the quality of the documentation, I really prefer using django-rest-framework CBVs more than using Django's actual CBVs.&lt;/p&gt;
&lt;p&gt;Maybe I should make an HTML renderer for django-rest-framework? :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-what-about-django-piston"&gt;
&lt;h2&gt;But what about django-piston?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Don't use django-piston&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I don't want to say anything negative, but let's face it: &lt;strong&gt;django-piston is dead&lt;/strong&gt;. Besides a critical security release last year, nothing has been done for it in about 3 years. The documentation is weak, the code mostly untested, and the original author left. He has gone on to do some amazing things. Django-piston was amazing in its time, but its time has passed and so should you.&lt;/p&gt;
&lt;p&gt;The only reason for using django-piston for years has been that it supported OAuth, but django-tastypie now addresses that use case. I've used django-tastypie's basic OAuth class and rolled custom Authentication modules to support some extra OAuth flavors and found it wonderful.&lt;/p&gt;
&lt;p&gt;Use django-tastypie or django-rest-framework instead. You'll be much, much happier for it.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;a class="reference external" href="http://news.ycombinator.com/item?id=3954314"&gt;Discuss this on Hacker News&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="api"></category><category term="review"></category></entry><entry><title>PyCon Australia 2011 Review</title><link href="https://pydanny.com/pycon-australia-2011-review.html" rel="alternate"></link><updated>2012-02-24T12:45:00-08:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:https://pydanny.com,2012-02-24:pycon-australia-2011-review.html</id><summary type="html">&lt;p&gt;In June of 2011 I had the good fortune of having my then girlfriend, Audrey Roy, now fiancee, &lt;a class="reference external" href="https://pydanny.blogspot.com/2011/06/im-going-to-pycon-australia.html"&gt;invited to present a keynote speech at PyCon Australia 2011&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was terribly excited for her to get that invitation, and that excitement was compounded when they allowed me to present on &lt;a class="reference external" href="http://www.slideshare.net/pydanny/confessions-of-a-joe-developer`:"&gt;Confessions of Joe Developer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Travel is a passion of mine, and it's only been since 2007 that I've gotten a chance to do much seeing of the world. Australia was always this distant goal of mine, but I never thought I would get the chance to go. Fortunately, my assumption was wrong and we landed on August 18th in Sydney, Australia!&lt;/p&gt;
&lt;p&gt;Audrey &lt;a class="reference external" href="http://audreyr.posterous.com/thank-you-pycon-au"&gt;wrote her own statement about the event&lt;/a&gt; right after we were done. She's good that way. Okay then, off to my own review. This is belated, but better late then never, right?&lt;/p&gt;
&lt;div class="section" id="conference-rooms"&gt;
&lt;h2&gt;Conference Rooms&lt;/h2&gt;
&lt;p&gt;The Sydney Masonic Center was the venue and it was a really curious building. They built it a while ago, then apparently grafted an office building onto the top of the temple. &lt;strong&gt;You have to see it to believe it&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The main temple room was room, interesting, and fun. The acoustics, to my limited ear, seemed quite good. The alternative rooms for some of the tracks were small presentation rooms, which did quite nicely except when the organizers chose popular talks for small rooms and things overflowed. Everyone was good natured about that and we all just worked it out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result: Great&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="speakers"&gt;
&lt;h2&gt;Speakers&lt;/h2&gt;
&lt;p&gt;I'm partial but I think the opening keynote by Audrey Roy about diversity was wonderful. Mary Gardinar also talk about open source projects trying to change the world that need our support. Raymond Hettiger seriously delivered the goods with another version of his amazing talk about what makes Python great. Whatever you do, go and see it as many times as possible because he changes it each and every time.  Richard Jones' presentation on the &lt;a class="reference external" href="https://pydanny-event-notes.readthedocs.org/en/latest/PyconAU2011/zen_of_python.html"&gt;Zen of Python&lt;/a&gt; was very solid too, and I'll use this as an opportunity to promote my &lt;a class="reference external" href="http://pypi.python.org/pypi/that"&gt;Anti-Zen of Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When it came time for me to present on &lt;a class="reference external" href="http://www.slideshare.net/pydanny/confessions-of-a-joe-developer`:"&gt;Confessions of Joe Developer&lt;/a&gt;, I finished way too early; plus me and Audrey felt the talk was not technical enough. Even though the reception for my talk was very positive, based on that experience and observation we ramped up the technical content for DjangoCon US and I delivered a much stronger talk. I want to thank the Australian Python community for being a wonderful audience.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://pydanny-event-notes.readthedocs.org/en/latest/PyconAU2011/index.html"&gt;rest of the talks I saw were all quite good&lt;/a&gt;, in fact the &lt;a class="reference external" href="https://pydanny-event-notes.readthedocs.org/en/latest/PyconAU2011/decorators.html"&gt;one on decorators&lt;/a&gt; was incredible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result: Super&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conference-meals"&gt;
&lt;h2&gt;Conference Meals&lt;/h2&gt;
&lt;p&gt;The night before the conference, Frends/mentors Russell Keith-Magee and Malcolm Tredennick took me to a sushi-train place and we gobbled down some very nice raw seafood. Call me silly, but sushi on moving plates just tastes better! Thanks guys!&lt;/p&gt;
&lt;p&gt;In between talks they served nice little sandwiches. The coffee bar had lovely Flat Whites and considering the quality of dairy in Australia I was very happy with the break food.&lt;/p&gt;
&lt;p&gt;The first night of the conference they served an amazing, amazing meal. The lamb was like nothing I've tasted before - my best way of describing it was &amp;quot;&lt;em&gt;so this is how lamb is supposed to taste&lt;/em&gt;&amp;quot;. We also got served Pavlova, which Audrey really enjoyed.&lt;/p&gt;
&lt;p&gt;The last evening of the conference we went out to a famous Sydney gastropub/brewery and got kangaroo and crocodile pizza. The kangaroo was outstanding, but the alligator wasn't my thing.&lt;/p&gt;
&lt;p&gt;After the conference we went with Graham Dumpleton to a wonderful Dim Sum place and I stuffed myself silly while Audrey quizzed Graham on WSGI. I was sleepy for the rest of the day.&lt;/p&gt;
&lt;p&gt;Pounds gained? Many.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result: Superb&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="parties"&gt;
&lt;h2&gt;Parties&lt;/h2&gt;
&lt;p&gt;There were some lovely dinners and hang-outs. It was incredible putting faces to names and personalities. Everyone looked as I imagined, which meant they looked smashing. Events tended to be lower key, which can make for some wonderfully nice, cozy conversation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result: Good&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="accommodations"&gt;
&lt;h2&gt;Accommodations&lt;/h2&gt;
&lt;p&gt;There was no official conference hotel so we stayed at World Hotel - in easy walking distance of the conference center. It wasn't cheap, but I've learned from painful experience that when you travel to a conference, you want to spend your time at the conference, not going to-and-from a cheap hotel five miles away.&lt;/p&gt;
&lt;p&gt;The staff of the hotel were very nice and helpful. Unfortunately they were working around the limitations of their building. The rooms were really tiny and rather stuffy. Normally that isn't an issue since we spend a lot of our time outside the room, but in this case Audrey was polishing her talk and needed a quiet room.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result: Average but not the fault of the conference&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sprints"&gt;
&lt;h2&gt;Sprints&lt;/h2&gt;
&lt;p&gt;We talked with Richard Jones about PyPI authentication issues, and he decided to go with OpenID. Personally, I would prefer OAUTH but I'll take whatever I can get. On the behalf of the community Mark Rees implemented OpenID on PyPI at the sprint so things like &lt;a class="reference external" href="http://opencomparison.org"&gt;http://opencomparison.org&lt;/a&gt; can support the community better. One goal at PyCon 2012 is to get that working as another authentication system.&lt;/p&gt;
&lt;p&gt;Otherwise I closed bugs and worked lintification of the project. Audrey and a couple Australian PyLadies, Elena Williams and Jenny Nguyen, worked some core Django documentation tickets. We didn't get as much done as we hoped thanks to an outside distraction, but the organization of the sprints was top-notch.&lt;/p&gt;
&lt;p&gt;During the sprint, those crazy Australians taught us how to do a &lt;strong&gt;Tim Tam Slam&lt;/strong&gt;. It's rather scary and not for the faint of heart.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result: Great&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="overall-result"&gt;
&lt;h2&gt;Overall Result&lt;/h2&gt;
&lt;p&gt;The conference was run professionally. The leadership was on the ball. The few issues that cropped up were taken care of, certainly better then what I would have done. Thank you everyone who put it together or just gave us a great time: Tim Ansell, Richard Jones, Nick Coghlan, Russell Keith McGee, Graham Dumpleton, Malcolm Tredennick and many others.&lt;/p&gt;
&lt;p&gt;Australia was amazing. The people were wonderful. I wish we had more time to go sightseeing and relax, but we were off all too quickly. I could write a book about the experience.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Combined Result: Great&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="pycon"></category><category term="audrey"></category><category term="australia"></category><category term="review"></category></entry></feed>