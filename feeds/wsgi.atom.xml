<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pydanny</title><link href="https://pydanny.com/" rel="alternate"></link><link href="https://pydanny.com/feeds/wsgi.atom.xml" rel="self"></link><id>https://pydanny.com/</id><updated>2012-07-09T12:00:00-07:00</updated><entry><title>Simple HTTP Basic Auth Wall</title><link href="https://pydanny.com/simple-http-basic-auth-wall.html" rel="alternate"></link><updated>2012-07-09T12:00:00-07:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:pydanny.com,2012-07-09:simple-http-basic-auth-wall.html</id><summary type="html">&lt;p&gt;I have a client who wanted their entire unlaunched public content site quickly but temporarily blocked for a short period of time. He wanted a universal password so he could send the site to reviewers, done quickly, and nothing else. In a few days the site will launch, and even if someone got through the authentication, nothing bad will happen except for an early visitor. So we determined this was a job for a very simple &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Basic_access_authentication"&gt;Basic access authentication&lt;/a&gt; implementation.&lt;/p&gt;
&lt;p&gt;I asked around and &lt;a class="reference external" href="http://jacobian.org/"&gt;Jacob Kaplan-Moss&lt;/a&gt; gave me this awesome snippet using &lt;a class="reference external" href="http://pypi.python.org/pypi/barrel"&gt;barrel&lt;/a&gt; that I pasted right into the bottom of the &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; 1.4-style application's &lt;tt class="docutils literal"&gt;wsgi.py&lt;/tt&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Add to the bottom of your wsgi.py file&lt;/span&gt;
&lt;span class="c"&gt;# Don&amp;#39;t forget to add barrel to your requirements!&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;barrel&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cooper&lt;/span&gt;

&lt;span class="n"&gt;REALM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PRIVATE&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;USERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;eggs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cooper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicauth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;USERS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;realm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;REALM&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;get_wsgi_application&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This took all of 5 minutes to implement and launch. The result is that the first time you visit the site the login prompt appears. If you enter 'spam' and 'eggs' then you can see the site fine.&lt;/p&gt;
&lt;p&gt;It worked and the customer was happy.&lt;/p&gt;
&lt;p&gt;Will this block a concerted penetration attempt? Of course not. If the site has/had critical or identifying information it would be implemented with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/HTTPS"&gt;HTTPS&lt;/a&gt;. Implementing a Django site with HTTPS is something I've done many times now, but this use case was 'do it fast, easy, and make it temporary'.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Moral of the story:&lt;/strong&gt; Pay attention to your requirements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; As this is just adding in some WSGI middleware, this should work without much modification in Flask, Pyramid, and other WSGI compliant web frameworks.&lt;/p&gt;
</summary><category term="python"></category><category term="django"></category><category term="wsgi"></category><category term="howto"></category></entry></feed>