<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pydanny</title><link href="https://pydanny.com/" rel="alternate"></link><link href="https://pydanny.com/feeds/postgresql.atom.xml" rel="self"></link><id>https://pydanny.com/</id><updated>2016-05-26T17:00:00-07:00</updated><entry><title>Pretty Formatting JSON in the Django Admin</title><link href="https://pydanny.com/pretty-formatting-json-django-admin.html" rel="alternate"></link><updated>2016-05-26T17:00:00-07:00</updated><author><name>Daniel-Roy-Greenfeld</name></author><id>tag:pydanny.com,2016-05-26:pretty-formatting-json-django-admin.html</id><summary type="html">&lt;p&gt;Recently I was writing code to interact with a third-party API. The API changes frequently, especially the data contained in responses. However, that data has to be saved and periodically needs to be audited. I wanted a data model flexible enough to handle these periodic changes without a lot of anguish, yet queryable. Since the API serves out queryable JSON, this made it a no-brainer for using  &lt;tt class="docutils literal"&gt;django.contrib.postgres&lt;/tt&gt;'s JSONField.&lt;/p&gt;
&lt;p&gt;After a little bit of work, I had data samples to play with. Quickly my admin filled with chunks of JSON that looked something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;field_12&amp;quot;&lt;/span&gt;: 8, &lt;span class="s2"&gt;&amp;quot;field_16&amp;quot;&lt;/span&gt;: 4, &lt;span class="s2"&gt;&amp;quot;field_6&amp;quot;&lt;/span&gt;: 14, &lt;span class="s2"&gt;&amp;quot;field_7&amp;quot;&lt;/span&gt;: 13, &lt;span class="s2"&gt;&amp;quot;field_18&amp;quot;&lt;/span&gt;: 2, &lt;span class="s2"&gt;&amp;quot;field_2&amp;quot;&lt;/span&gt;: 18, &lt;span class="s2"&gt;&amp;quot;field_4&amp;quot;&lt;/span&gt;: 16, &lt;span class="s2"&gt;&amp;quot;field_15&amp;quot;&lt;/span&gt;: 5, &lt;span class="s2"&gt;&amp;quot;field_9&amp;quot;&lt;/span&gt;: 11, &lt;span class="s2"&gt;&amp;quot;field_3&amp;quot;&lt;/span&gt;: 17, &lt;span class="s2"&gt;&amp;quot;field_8&amp;quot;&lt;/span&gt;: 12, &lt;span class="s2"&gt;&amp;quot;field_11&amp;quot;&lt;/span&gt;: 9, &lt;span class="s2"&gt;&amp;quot;field_17&amp;quot;&lt;/span&gt;: 3, &lt;span class="s2"&gt;&amp;quot;field_10&amp;quot;&lt;/span&gt;: 10, &lt;span class="s2"&gt;&amp;quot;field_0&amp;quot;&lt;/span&gt;: 20, &lt;span class="s2"&gt;&amp;quot;field_1&amp;quot;&lt;/span&gt;: 19, &lt;span class="s2"&gt;&amp;quot;field_13&amp;quot;&lt;/span&gt;: 7, &lt;span class="s2"&gt;&amp;quot;field_5&amp;quot;&lt;/span&gt;: 15, &lt;span class="s2"&gt;&amp;quot;field_14&amp;quot;&lt;/span&gt;: 6&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kind of illegible, right? And that's a simple, flat example with just 20 keys. Imagine if this were a nested dictionary with 100 or 200 fields. For reference, that's the kind of data that I had that makes this kind of display nigh useless.&lt;/p&gt;
&lt;p&gt;So I cooked up this quick fix:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;highlight&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.lexers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JsonLexer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.formatters&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HtmlFormatter&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.safestring&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mark_safe&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;APIData&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;APIDataAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;readonly_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;data_prettified&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;data_prettified&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Function to display pretty version of our data&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="c"&gt;# Convert the data to sorted, indented JSON&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sort_keys&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Truncate the data. Alter as needed&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c"&gt;# Get the Pygments formatter&lt;/span&gt;
        &lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HtmlFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;colorful&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Highlight the data&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;highlight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JsonLexer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Get the stylesheet&lt;/span&gt;
        &lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;style&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_style_defs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;/style&amp;gt;&amp;lt;br&amp;gt;&amp;quot;&lt;/span&gt;

        &lt;span class="c"&gt;# Safe the output&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mark_safe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;data_prettified&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;short_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;data prettified&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APIData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;APIDataAdmin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The field remains the same, but we also get a display of nicely formatted data:&lt;/p&gt;
&lt;img alt="Admin Pretty JSON" class="align-center img-responsive" id="admin-pretty-json" src="https://www.pydanny.com/static/admin-pretty-json.png"&gt;&lt;p&gt;Much better!&lt;/p&gt;
&lt;p&gt;There may be a package out there that does this already, perhaps even using a JavaScript library like hightlight.js instead of pygments. If not, it shouldn't be hard to create one using &lt;a class="reference external" href="https://www.pydanny.com/how-to-create-installable-django-packages.html"&gt;Cookiecutter Django Package&lt;/a&gt;. Let me know if you package this and I'll add it to this blog post.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="see-you-at-pycon"&gt;
&lt;h2&gt;See you at PyCon!&lt;/h2&gt;
&lt;p&gt;I'll be at PyCon with &lt;a class="reference external" href="https://twitter.com/audreyr"&gt;Audrey Roy Greenfeld&lt;/a&gt;. You can easily find us at the &lt;a class="reference external" href="https://github.com/audreyr/cookiecutter"&gt;Cookiecutter&lt;/a&gt; booth during the main conference days or at the &lt;a class="reference external" href="https://us.pycon.org/2016/community/sprints/#cookiecutter"&gt;Cookiecutter sprint&lt;/a&gt;. Stop by and say hi!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="cheatsheet"></category><category term="ppoftw"></category><category term="postgresql"></category></entry></feed>